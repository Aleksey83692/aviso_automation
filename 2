#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Aviso YouTube Tasks Automation Script - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
–ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò:
- –†–µ–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–¥–∞–Ω–∏–π
- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω—Ç–∏–±–æ—Ç –∑–∞—â–∏—Ç—ã YouTube
- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
- –£–º–µ–Ω—å—à–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —á—Ç–µ–Ω–∏—è –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
"""

import os
import sys
import time
import random
import json
import logging
import subprocess
import platform
import re
import pickle
import hashlib
import shutil
import zipfile
import stat
import socket
import urllib3
from datetime import datetime, timedelta
from pathlib import Path
from typing import List, Dict, Optional, Tuple
import math

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ —Å –∞–≤—Ç–æ—É—Å—Ç–∞–Ω–æ–≤–∫–æ–π
def install_requirements():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    required_packages = [
        'selenium',
        'requests',
        'beautifulsoup4',
        'fake-useragent',
        'webdriver-manager',
        'g4f'  # –î–æ–±–∞–≤–ª—è–µ–º g4f –¥–ª—è GPT-4
    ]
    
    logging.info("üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    for package in required_packages:
        try:
            package_name = package.split('[')[0].replace('-', '_')
            __import__(package_name)
            logging.info(f"‚úì –ü–∞–∫–µ—Ç {package} —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except ImportError:
            logging.info(f"‚ö† –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø–∞–∫–µ—Ç {package}...")
            try:
                subprocess.check_call([sys.executable, "-m", "pip", "install", package], 
                                    stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                logging.info(f"‚úì –ü–∞–∫–µ—Ç {package} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except subprocess.CalledProcessError as e:
                logging.error(f"‚úó –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞–∫–µ—Ç–∞ {package}: {e}")
                try:
                    logging.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {package}...")
                    subprocess.check_call([sys.executable, "-m", "pip", "install", "--user", package],
                                        stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                    logging.info(f"‚úì –ü–∞–∫–µ—Ç {package} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ --user")
                except subprocess.CalledProcessError:
                    logging.warning(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å {package}, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[logging.StreamHandler(sys.stdout)]
)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install_requirements()

# –ò–º–ø–æ—Ä—Ç –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
try:
    from selenium import webdriver
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    from selenium.webdriver.common.action_chains import ActionChains
    from selenium.webdriver.firefox.options import Options
    from selenium.webdriver.firefox.service import Service
    from selenium.common.exceptions import *
    from selenium.webdriver.common.keys import Keys
    try:
        from webdriver_manager.firefox import GeckoDriverManager as WDMGeckoDriverManager
    except ImportError:
        WDMGeckoDriverManager = None
    import requests
    from bs4 import BeautifulSoup
    from fake_useragent import UserAgent
    import g4f
except ImportError as e:
    logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    logging.error("üìã –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤—Ä—É—á—É—é:")
    logging.error("pip install selenium requests beautifulsoup4 fake-useragent webdriver-manager g4f")
    sys.exit(1)

def kill_existing_tor_processes():
    """–£–±–∏–≤–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Tor"""
    try:
        logging.info("üîÑ –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Tor...")
        
        system = platform.system().lower()
        is_termux = 'com.termux' in os.environ.get('PREFIX', '') or '/data/data/com.termux' in os.environ.get('HOME', '')
        
        if is_termux or system == 'linux':
            # –£–±–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã tor
            try:
                subprocess.run(['pkill', '-f', 'tor'], capture_output=True, timeout=10)
                time.sleep(2)
            except:
                pass
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —á–µ—Ä–µ–∑ killall
            try:
                subprocess.run(['killall', 'tor'], capture_output=True, timeout=10)
                time.sleep(2)
            except:
                pass
                
        elif system == 'windows':
            try:
                subprocess.run(['taskkill', '/F', '/IM', 'tor.exe'], capture_output=True, timeout=10)
                time.sleep(2)
            except:
                pass
        
        logging.info("‚úì –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Tor –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
    except Exception as e:
        logging.debug(f"‚ö† –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Tor: {e}")

def find_free_port_range(start_port: int, count: int = 2) -> List[int]:
    """–ü–æ–∏—Å–∫ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤ –ø–æ–¥—Ä—è–¥"""
    free_ports = []
    
    for port in range(start_port, start_port + 1000):
        if len(free_ports) >= count:
            break
            
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
                s.bind(('127.0.0.1', port))
                free_ports.append(port)
        except OSError:
            free_ports = []  # –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ
            continue
    
    if len(free_ports) >= count:
        return free_ports[:count]
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ä—è–¥, –±–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ
    import random
    fallback_ports = []
    for _ in range(count):
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.bind(('127.0.0.1', 0))
            fallback_ports.append(s.getsockname()[1])
    
    return fallback_ports

class GeckoDriverManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è geckodriver"""
    
    def __init__(self):
        self.system = platform.system().lower()
        self.is_termux = self.detect_termux()
        self.driver_path = None
        
    def detect_termux(self) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –≤ Termux"""
        return 'com.termux' in os.environ.get('PREFIX', '') or \
               '/data/data/com.termux' in os.environ.get('HOME', '')
    
    def get_latest_geckodriver_version(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏ geckodriver"""
        try:
            response = requests.get('https://api.github.com/repos/mozilla/geckodriver/releases/latest', timeout=10)
            response.raise_for_status()
            data = response.json()
            return data['tag_name'].lstrip('v')
        except Exception as e:
            logging.warning(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é geckodriver: {e}")
            return "0.33.0"  # –§–æ–ª–ª–±—ç–∫ –≤–µ—Ä—Å–∏—è
    
    def download_geckodriver(self, version: str) -> Optional[str]:
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ geckodriver"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
            if self.is_termux:
                platform_name = "linux-aarch64"
                if "aarch64" not in platform.machine():
                    platform_name = "linux32"
            elif self.system == 'linux':
                arch = platform.machine()
                if arch == 'x86_64':
                    platform_name = "linux64"
                elif arch == 'aarch64':
                    platform_name = "linux-aarch64"
                else:
                    platform_name = "linux32"
            elif self.system == 'windows':
                arch = platform.machine()
                if arch == 'AMD64':
                    platform_name = "win64"
                else:
                    platform_name = "win32"
            elif self.system == 'darwin':
                arch = platform.machine()
                if arch == 'arm64':
                    platform_name = "macos-aarch64"
                else:
                    platform_name = "macos"
            else:
                logging.error(f"‚úó –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: {self.system}")
                return None
            
            # URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            if self.system == 'windows':
                filename = f"geckodriver-v{version}-{platform_name}.zip"
                executable_name = "geckodriver.exe"
            else:
                filename = f"geckodriver-v{version}-{platform_name}.tar.gz"
                executable_name = "geckodriver"
            
            url = f"https://github.com/mozilla/geckodriver/releases/download/v{version}/{filename}"
            
            logging.info(f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ geckodriver v{version} –¥–ª—è {platform_name}...")
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥—Ä–∞–π–≤–µ—Ä–æ–≤
            drivers_dir = os.path.join(os.path.expanduser("~"), ".webdrivers")
            os.makedirs(drivers_dir, exist_ok=True)
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            response = requests.get(url, timeout=60)
            response.raise_for_status()
            
            archive_path = os.path.join(drivers_dir, filename)
            with open(archive_path, 'wb') as f:
                f.write(response.content)
            
            logging.info(f"‚úì Geckodriver —Å–∫–∞—á–∞–Ω: {archive_path}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä—Ö–∏–≤
            extract_dir = os.path.join(drivers_dir, f"geckodriver-{version}")
            os.makedirs(extract_dir, exist_ok=True)
            
            if filename.endswith('.zip'):
                with zipfile.ZipFile(archive_path, 'r') as zip_ref:
                    zip_ref.extractall(extract_dir)
            else:
                import tarfile
                with tarfile.open(archive_path, 'r:gz') as tar_ref:
                    tar_ref.extractall(extract_dir)
            
            # –ù–∞—Ö–æ–¥–∏–º –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª
            driver_path = os.path.join(extract_dir, executable_name)
            
            if not os.path.exists(driver_path):
                # –ò—â–µ–º –≤ –ø–æ–¥–ø–∞–ø–∫–∞—Ö
                for root, dirs, files in os.walk(extract_dir):
                    if executable_name in files:
                        driver_path = os.path.join(root, executable_name)
                        break
            
            if os.path.exists(driver_path):
                # –î–µ–ª–∞–µ–º –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º –Ω–∞ Unix —Å–∏—Å—Ç–µ–º–∞—Ö
                if self.system != 'windows':
                    st = os.stat(driver_path)
                    os.chmod(driver_path, st.st_mode | stat.S_IEXEC)
                
                logging.info(f"‚úÖ Geckodriver —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {driver_path}")
                
                # –£–¥–∞–ª—è–µ–º –∞—Ä—Ö–∏–≤
                try:
                    os.remove(archive_path)
                except:
                    pass
                
                return driver_path
            else:
                logging.error(f"‚úó –ù–µ –Ω–∞–π–¥–µ–Ω –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª geckodriver –≤ {extract_dir}")
                return None
                
        except Exception as e:
            logging.error(f"‚úó –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è geckodriver: {e}")
            return None
    
    def find_geckodriver(self) -> Optional[str]:
        """–ü–æ–∏—Å–∫ geckodriver –≤ —Å–∏—Å—Ç–µ–º–µ"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ PATH
        try:
            if self.system == 'windows':
                result = subprocess.run(['where', 'geckodriver'], capture_output=True, text=True)
            else:
                result = subprocess.run(['which', 'geckodriver'], capture_output=True, text=True)
            
            if result.returncode == 0:
                driver_path = result.stdout.strip()
                if os.path.exists(driver_path):
                    logging.info(f"‚úì –ù–∞–π–¥–µ–Ω geckodriver –≤ PATH: {driver_path}")
                    return driver_path
        except:
            pass
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
        possible_paths = []
        
        if self.is_termux:
            possible_paths = [
                '/data/data/com.termux/files/usr/bin/geckodriver',
                f"{os.environ.get('PREFIX', '')}/bin/geckodriver"
            ]
        elif self.system == 'linux':
            possible_paths = [
                '/usr/bin/geckodriver',
                '/usr/local/bin/geckodriver',
                '/opt/geckodriver/geckodriver',
                '/snap/bin/geckodriver'
            ]
        elif self.system == 'windows':
            possible_paths = [
                r"C:\Program Files\geckodriver\geckodriver.exe",
                r"C:\Program Files (x86)\geckodriver\geckodriver.exe",
                r"C:\geckodriver\geckodriver.exe"
            ]
        elif self.system == 'darwin':
            possible_paths = [
                '/usr/local/bin/geckodriver',
                '/opt/homebrew/bin/geckodriver'
            ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –¥–æ–º–∞—à–Ω–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        home_drivers = os.path.join(os.path.expanduser("~"), ".webdrivers")
        if os.path.exists(home_drivers):
            for root, dirs, files in os.walk(home_drivers):
                for file in files:
                    if file.startswith('geckodriver'):
                        possible_paths.append(os.path.join(root, file))
        
        for path in possible_paths:
            if os.path.exists(path) and os.access(path, os.X_OK):
                logging.info(f"‚úì –ù–∞–π–¥–µ–Ω geckodriver: {path}")
                return path
        
        return None
    
    def get_driver_path(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ geckodriver —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π"""
        if self.driver_path:
            return self.driver_path
        
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
        driver_path = self.find_geckodriver()
        
        if not driver_path:
            logging.info("üì¶ Geckodriver –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É...")
            
            # –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å webdriver-manager
            if WDMGeckoDriverManager:
                try:
                    logging.info("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è webdriver-manager...")
                    driver_path = WDMGeckoDriverManager().install()
                    if driver_path and os.path.exists(driver_path):
                        logging.info(f"‚úÖ Geckodriver —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ webdriver-manager: {driver_path}")
                        self.driver_path = driver_path
                        return driver_path
                except Exception as e:
                    logging.warning(f"‚ö† Webdriver-manager –Ω–µ —É–¥–∞–ª—Å—è: {e}")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –≤—Ä—É—á–Ω—É—é
            version = self.get_latest_geckodriver_version()
            driver_path = self.download_geckodriver(version)
            
            if not driver_path:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å geckodriver –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
        
        self.driver_path = driver_path
        return driver_path

class UserAgentManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è User-Agent –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ - –°–õ–£–ß–ê–ô–ù–´–ï –ê–ì–ï–ù–¢–´"""
    
    def __init__(self):
        self.ua_file = "user_agents.json"
        self.user_agents = self.load_user_agents()
        
    def load_user_agents(self) -> Dict[str, str]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö User-Agent'–æ–≤"""
        try:
            if os.path.exists(self.ua_file):
                with open(self.ua_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except Exception as e:
            logging.debug(f"‚ö† –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ User-Agent'–æ–≤: {e}")
        
        return {}
    
    def save_user_agents(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ User-Agent'–æ–≤"""
        try:
            with open(self.ua_file, 'w', encoding='utf-8') as f:
                json.dump(self.user_agents, f, indent=2, ensure_ascii=False)
            logging.debug("üíæ User-Agent'—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        except Exception as e:
            logging.error(f"‚úó –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è User-Agent'–æ–≤: {e}")
    
    def generate_random_user_agent(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–ª—É—á–∞–π–Ω–æ–≥–æ User-Agent"""
        try:
            from fake_useragent import UserAgent
            ua = UserAgent()
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç–∏–ø –±—Ä–∞—É–∑–µ—Ä–∞
            browser_types = ['chrome', 'firefox', 'safari', 'edge', 'opera']
            browser = random.choice(browser_types)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º User-Agent –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞
            if browser == 'chrome':
                user_agent = ua.chrome
            elif browser == 'firefox':
                user_agent = ua.firefox
            elif browser == 'safari':
                user_agent = ua.safari
            elif browser == 'edge':
                user_agent = ua.edge
            elif browser == 'opera':
                user_agent = ua.opera
            else:
                user_agent = ua.random
            
            return user_agent
            
        except Exception as e:
            logging.warning(f"‚ö† –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ User-Agent: {e}")
            # Fallback - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∏–∑ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö
            fallback_agents = [
                "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
                "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
                "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
                "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/121.0",
                "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/121.0",
                "Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/121.0",
                "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.2 Safari/605.1.15",
                "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36 Edg/120.0.0.0",
                "Mozilla/5.0 (Linux; Android 13; SM-G991B) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Mobile Safari/537.36",
                "Mozilla/5.0 (iPhone; CPU iPhone OS 17_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.2 Mobile/15E148 Safari/604.1",
                "Mozilla/5.0 (iPad; CPU OS 17_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.2 Mobile/15E148 Safari/604.1"
            ]
            return random.choice(fallback_agents)
    
    def get_user_agent(self, username: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ User-Agent –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –°–õ–£–ß–ê–ô–ù–´–ô"""
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_key = hashlib.md5(username.encode()).hexdigest()
        
        if user_key not in self.user_agents:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–ª—É—á–∞–π–Ω—ã–π User-Agent
            random_ua = self.generate_random_user_agent()
            
            self.user_agents[user_key] = random_ua
            self.save_user_agents()
            logging.info(f"üé≠ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Å–ª—É—á–∞–π–Ω—ã–π User-Agent –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")
        
        user_agent = self.user_agents[user_key]
        logging.info(f"üé≠ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è User-Agent –¥–ª—è {username}: {user_agent[:80]}...")
        return user_agent

class HumanBehaviorSimulator:
    """–ö–ª–∞—Å—Å –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è"""
    
    @staticmethod
    def random_sleep(min_seconds: float = 0.1, max_seconds: float = 0.5):
        """–°–ª—É—á–∞–π–Ω–∞—è –ø–∞—É–∑–∞ - –£–ú–ï–ù–¨–®–ï–ù–´ –ó–ê–î–ï–†–ñ–ö–ò"""
        sleep_time = random.uniform(min_seconds, max_seconds)
        logging.debug(f"üí§ –ü–∞—É–∑–∞ {sleep_time:.2f} —Å–µ–∫—É–Ω–¥")
        time.sleep(sleep_time)
    
    @staticmethod
    def generate_bezier_curve(start: Tuple[int, int], end: Tuple[int, int], 
                            control_points: int = 2) -> List[Tuple[int, int]]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∏–≤–æ–π –ë–µ–∑—å–µ –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏ - –£–°–ö–û–†–ï–ù–û"""
        def bezier_point(t: float, points: List[Tuple[int, int]]) -> Tuple[int, int]:
            n = len(points) - 1
            x = sum(math.comb(n, i) * (1-t)**(n-i) * t**i * points[i][0] for i in range(n+1))
            y = sum(math.comb(n, i) * (1-t)**(n-i) * t**i * points[i][1] for i in range(n+1))
            return int(x), int(y)
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏
        control_pts = [start]
        for _ in range(control_points):
            x = random.randint(min(start[0], end[0]), max(start[0], end[0]))
            y = random.randint(min(start[1], end[1]), max(start[1], end[1]))
            control_pts.append((x, y))
        control_pts.append(end)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ—á–∫–∏ –∫—Ä–∏–≤–æ–π - –£–ú–ï–ù–¨–®–ï–ù–û –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫
        curve_points = []
        steps = random.randint(5, 15)  # –£–º–µ–Ω—å—à–µ–Ω–æ —Å 10-30
        for i in range(steps + 1):
            t = i / steps
            point = bezier_point(t, control_pts)
            curve_points.append(point)
        
        return curve_points
    
    @staticmethod
    def human_like_typing(element, text: str, driver):
        """–£–°–ö–û–†–ï–ù–ù–ê–Ø –∏–º–∏—Ç–∞—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞"""
        element.clear()
        HumanBehaviorSimulator.random_sleep(0.1, 2) 
        
        # –†–∞—Å–∫–ª–∞–¥–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –æ–ø–µ—á–∞—Ç–æ–∫
        qwerty_neighbors = {
            'q': ['w', 'a'], 'w': ['q', 'e', 's'], 'e': ['w', 'r', 'd'], 'r': ['e', 't', 'f'],
            't': ['r', 'y', 'g'], 'y': ['t', 'u', 'h'], 'u': ['y', 'i', 'j'], 'i': ['u', 'o', 'k'],
            'o': ['i', 'p', 'l'], 'p': ['o', 'l'], 'a': ['q', 's', 'z'], 's': ['w', 'a', 'd', 'x'],
            'd': ['e', 's', 'f', 'c'], 'f': ['r', 'd', 'g', 'v'], 'g': ['t', 'f', 'h', 'b'],
            'h': ['y', 'g', 'j', 'n'], 'j': ['u', 'h', 'k', 'm'], 'k': ['i', 'j', 'l'],
            'l': ['o', 'k', 'p'], 'z': ['a', 's', 'x'], 'x': ['z', 's', 'd', 'c'],
            'c': ['x', 'd', 'f', 'v'], 'v': ['c', 'f', 'g', 'b'], 'b': ['v', 'g', 'h', 'n'],
            'n': ['b', 'h', 'j', 'm'], 'm': ['n', 'j', 'k'],
            '1': ['2', 'q'], '2': ['1', '3', 'q', 'w'], '3': ['2', '4', 'w', 'e'],
            '4': ['3', '5', 'e', 'r'], '5': ['4', '6', 'r', 't'], '6': ['5', '7', 't', 'y'],
            '7': ['6', '8', 'y', 'u'], '8': ['7', '9', 'u', 'i'], '9': ['8', '0', 'i', 'o'],
            '0': ['9', 'o', 'p']
        }
        
        typed_text = ""
        i = 0
        
        while i < len(text):
            char = text[i].lower()
            
            # –°–ª—É—á–∞–π–Ω—ã–µ –ø–∞—É–∑—ã –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏ - –ë–´–°–¢–†–ï–ï
            if char == ' ':
                pause = random.uniform(0.02, 1)  # –£–º–µ–Ω—å—à–µ–Ω–æ
            elif char.isdigit():
                pause = random.uniform(0.01, 1)  # –£–º–µ–Ω—å—à–µ–Ω–æ
            else:
                pause = random.uniform(0.01, 1)  # –£–º–µ–Ω—å—à–µ–Ω–æ
            
            time.sleep(pause)
            
            # –ò–º–∏—Ç–∞—Ü–∏—è –æ–ø–µ—á–∞—Ç–æ–∫ (2% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å - —É–º–µ–Ω—å—à–µ–Ω–æ)
            if random.random() < 0.02 and char in qwerty_neighbors:
                # –î–µ–ª–∞–µ–º –æ–ø–µ—á–∞—Ç–∫—É
                wrong_char = random.choice(qwerty_neighbors[char])
                element.send_keys(wrong_char)
                typed_text += wrong_char
                logging.debug(f"üî§ –û–ø–µ—á–∞—Ç–∫–∞: '{wrong_char}' –≤–º–µ—Å—Ç–æ '{char}'")
                
                # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º - –ë–´–°–¢–†–ï–ï
                time.sleep(random.uniform(0.05, 0.15))
                
                # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–µ—á–∞—Ç–∫—É
                element.send_keys(Keys.BACKSPACE)
                typed_text = typed_text[:-1]
                time.sleep(random.uniform(0.02, 0.08))
                
                # –ü–µ—á–∞—Ç–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª
                element.send_keys(text[i])
                typed_text += text[i]
                logging.debug(f"üî§ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞: '{text[i]}'")
                
            # –ò–º–∏—Ç–∞—Ü–∏—è –¥–≤–æ–π–Ω–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è (0.5% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å - —É–º–µ–Ω—å—à–µ–Ω–æ)
            elif random.random() < 0.005:
                element.send_keys(text[i])
                element.send_keys(text[i])  # –î–≤–æ–π–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ
                typed_text += text[i] + text[i]
                logging.debug(f"üî§ –î–≤–æ–π–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ: '{text[i]}'")
                
                # –ü–∞—É–∑–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                time.sleep(random.uniform(0.05, 0.15))
                element.send_keys(Keys.BACKSPACE)
                typed_text = typed_text[:-1]
                
            else:
                # –û–±—ã—á–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ
                element.send_keys(text[i])
                typed_text += text[i]
            
            # –°–ª—É—á–∞–π–Ω—ã–µ –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—ã–µ –ø–∞—É–∑—ã - –†–ï–ñ–ï
            if random.random() < 0.01:  # 1% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
                thinking_pause = random.uniform(0.1, 0.4)  # –£–º–µ–Ω—å—à–µ–Ω–æ
                logging.debug(f"ü§î –ü–∞—É–∑–∞ –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è: {thinking_pause:.2f}—Å")
                time.sleep(thinking_pause)
            
            i += 1
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ - –ë–´–°–¢–†–ï–ï
        HumanBehaviorSimulator.random_sleep(0.1, 0.25)
    
    @staticmethod
    def calculate_reading_time(text: str) -> float:
        """–ë–´–°–¢–†–ï–ï - —Ä–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —á—Ç–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ (–≤ 2 —Ä–∞–∑–∞ –±—ã—Å—Ç—Ä–µ–µ)"""
        # –ü–æ–¥—Å—á–µ—Ç —Å–ª–æ–≤
        words = len(text.split())
        
        # –ü–æ–¥—Å—á–µ—Ç —Å–∏–º–≤–æ–ª–æ–≤
        chars = len(text)
        
        # –£–í–ï–õ–ò–ß–ï–ù–ù–ê–Ø —Å–∫–æ—Ä–æ—Å—Ç—å —á—Ç–µ–Ω–∏—è: 300 —Å–ª–æ–≤ –≤ –º–∏–Ω—É—Ç—É –∏–ª–∏ 5 —Å–ª–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É (–±—ã–ª–æ 3.7)
        words_per_second = 5.0
        
        # –í—Ä–µ–º—è —á—Ç–µ–Ω–∏—è –ø–æ —Å–ª–æ–≤–∞–º
        reading_time_by_words = words / words_per_second
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ (—É–º–µ–Ω—å—à–µ–Ω–æ)
        complex_chars = sum(1 for c in text if not c.isalpha() and not c.isspace())
        additional_time = complex_chars * 0.05  # –£–º–µ–Ω—å—à–µ–Ω–æ —Å 0.1
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —á—Ç–µ–Ω–∏—è (—É–º–µ–Ω—å—à–µ–Ω–æ)
        min_time = max(2, words * 0.1)  # –£–º–µ–Ω—å—à–µ–Ω–æ —Å 5 –∏ 0.2
        
        total_time = max(min_time, reading_time_by_words + additional_time)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å ¬±30%
        variation = random.uniform(0.7, 1.3)
        final_time = total_time * variation
        
        # –í 2 —Ä–∞–∑–∞ –±—ã—Å—Ç—Ä–µ–µ
        final_time = final_time / 2
        
        logging.info(f"üìö –í—Ä–µ–º—è —á—Ç–µ–Ω–∏—è {words} —Å–ª–æ–≤ (~{chars} —Å–∏–º–≤–æ–ª–æ–≤): {final_time:.1f} —Å–µ–∫—É–Ω–¥")
        return final_time

class GPTManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å GPT —á–µ—Ä–µ–∑ g4f"""
    
    def __init__(self):
        try:
            import g4f
            self.g4f = g4f
            logging.info("‚úÖ g4f –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except ImportError:
            logging.error("‚ùå g4f –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            self.g4f = None
    
    def ask_gpt(self, letter_text: str, question: str, answers: List[str]) -> Optional[str]:
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –∑–∞–ø—Ä–æ—Å –∫ GPT —á–µ—Ä–µ–∑ g4f"""
        if not self.g4f:
            logging.error("‚ùå g4f –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            return None
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è GPT
            prompt = f"""–¢–≤–æ—è –∑–∞–¥–∞—á–∞: –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç –∏ –≤—ã–±—Ä–∞—Ç—å –≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –≤–æ–ø—Ä–æ—Å –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ —Å–∞–º–æ–º —Ç–µ–∫—Å—Ç–µ. –û—Ç–≤–µ—Ç—å –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –Ω–æ–º–µ—Ä–æ–º –≤–µ—Ä–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö. –ù–µ –ø–∏—à–∏ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –Ω–∏—á–µ–≥–æ –∫—Ä–æ–º–µ –Ω–æ–º–µ—Ä–∞ –æ—Ç–≤–µ—Ç–∞ —Ü–∏—Ñ—Ä–æ–π. 

–¢–µ–∫—Å—Ç: {letter_text}

–í–æ–ø—Ä–æ—Å: {question}

–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:"""
            for i, answer in enumerate(answers, 1):
                prompt += f"{i}. {answer}\n"
            
            prompt += "\n–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É):"
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ g4f
            response = self.g4f.ChatCompletion.create(
                model="gpt-4",
                messages=[
                    {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–∫—Å—Ç—É. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä–æ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞."},
                    {"role": "user", "content": prompt}
                ]
            )
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∏–∑ g4f
            if response and 'choices' in response and len(response['choices']) > 0:
                gpt_answer = response['choices'][0]['message']['content'].strip()
            elif isinstance(response, str):
                gpt_answer = response.strip()
            else:
                logging.error("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç g4f")
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–≤–µ—Ç - —ç—Ç–æ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
            if gpt_answer.isdigit() and 1 <= int(gpt_answer) <= len(answers):
                logging.info(f"ü§ñ GPT –≤—ã–±—Ä–∞–ª –æ—Ç–≤–µ—Ç: {gpt_answer}")
                return gpt_answer
            else:
                logging.error(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç GPT: {gpt_answer}")
                return None
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ GPT: {e}")
            return None

class SimpleTorManager:
    """–£–ü–†–û–©–ï–ù–ù–´–ô –∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Tor —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º"""
    
    def __init__(self):
        self.tor_port = None
        self.control_port = None
        self.tor_process = None
        self.system = platform.system().lower()
        self.is_termux = self.detect_termux()
        
        # –ü—É—Ç–∏ –∫ –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º
        self.tor_data_dir = None
        self.torrc_path = None
        self.stdout_log = None
        self.stderr_log = None
        
    def detect_termux(self) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –≤ Termux"""
        return 'com.termux' in os.environ.get('PREFIX', '') or \
               '/data/data/com.termux' in os.environ.get('HOME', '')
    
    def command_exists(self, cmd: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã"""
        try:
            if self.is_termux or self.system == 'linux':
                result = subprocess.run(['command', '-v', cmd], 
                                      capture_output=True, text=True, shell=True)
                return result.returncode == 0
            elif self.system == 'windows':
                result = subprocess.run(['where', cmd], 
                                      capture_output=True, text=True)
                return result.returncode == 0
            else:  # macOS
                result = subprocess.run(['which', cmd], 
                                      capture_output=True, text=True)
                return result.returncode == 0
        except:
            return False
    
    def install_tor_termux(self) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Tor –≤ Termux"""
        try:
            logging.info("üì± –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Tor –≤ Termux...")
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤
            logging.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤...")
            subprocess.run(['pkg', 'update'], check=True, 
                         stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Tor
            logging.info("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Tor...")
            subprocess.run(['pkg', 'install', '-y', 'tor'], check=True,
                         stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            
            logging.info("‚úì Tor —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ Termux")
            return True
            
        except subprocess.CalledProcessError as e:
            logging.error(f"‚úó –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Tor –≤ Termux: {e}")
            return False
        except Exception as e:
            logging.error(f"‚úó –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Tor –≤ Termux: {e}")
            return False
    
    def install_tor(self) -> bool:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Tor"""
        if self.is_termux:
            return self.install_tor_termux()
        else:
            logging.warning("‚ö† –ê–≤—Ç–æ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ Tor –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ Termux")
            logging.info("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Tor –≤—Ä—É—á–Ω—É—é –¥–ª—è –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã")
            return False
    
    def find_tor_executable(self) -> Optional[str]:
        """–ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞ Tor"""
        possible_paths = []
        
        if self.is_termux:
            possible_paths = [
                '/data/data/com.termux/files/usr/bin/tor',
                f"{os.environ.get('PREFIX', '')}/bin/tor"
            ]
        elif self.system == 'linux':
            possible_paths = [
                '/usr/bin/tor',
                '/usr/local/bin/tor',
                '/opt/tor/bin/tor'
            ]
        elif self.system == 'windows':
            username = os.getenv('USERNAME', 'User')
            possible_paths = [
                f"C:\\Users\\{username}\\Desktop\\Tor Browser\\Browser\\TorBrowser\\Tor\\tor.exe",
                r"C:\Program Files\Tor Browser\Browser\TorBrowser\Tor\tor.exe",
                r"C:\Program Files (x86)\Tor Browser\Browser\TorBrowser\Tor\tor.exe",
                r"C:\Tor\tor.exe"
            ]
        elif self.system == 'darwin':
            possible_paths = [
                '/usr/local/bin/tor',
                '/opt/homebrew/bin/tor',
                '/Applications/Tor Browser.app/Contents/MacOS/Tor/tor'
            ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø—É—Ç—å
        for path in possible_paths:
            if os.path.exists(path) and os.access(path, os.X_OK):
                logging.info(f"‚úì –ù–∞–π–¥–µ–Ω Tor: {path}")
                return path
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ PATH
        if self.command_exists('tor'):
            logging.info("‚úì Tor –Ω–∞–π–¥–µ–Ω –≤ PATH")
            return 'tor'
        
        return None
    
    def check_tor_port(self) -> bool:
        """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞ Tor"""
        if not self.tor_port:
            return False
            
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.settimeout(3)
                result = s.connect_ex(('127.0.0.1', self.tor_port))
                is_open = result == 0
                logging.debug(f"üîå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞ Tor {self.tor_port}: {'–æ—Ç–∫—Ä—ã—Ç' if is_open else '–∑–∞–∫—Ä—ã—Ç'}")
                return is_open
        except Exception as e:
            logging.debug(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–∞ Tor: {e}")
            return False

    def test_tor_connection(self) -> bool:
        """–ü—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ Tor"""
        logging.info("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï TOR –°–û–ï–î–ò–ù–ï–ù–ò–Ø")
        
        try:
            import requests
            
            proxies = {
                'http': f'socks5://127.0.0.1:{self.tor_port}',
                'https': f'socks5://127.0.0.1:{self.tor_port}'
            }
            
            response = requests.get('http://httpbin.org/ip', proxies=proxies, timeout=30)
            
            if response.status_code == 200:
                content = response.text.strip()
                logging.info(f"‚úÖ TOR –†–ê–ë–û–¢–ê–ï–¢! IP: {content}")
                return True
            else:
                logging.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–æ–¥: {response.status_code}")
                return False
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Tor: {e}")
            return False

    def start_tor(self) -> bool:
        """–ó–∞–ø—É—Å–∫ Tor —Å –ü–†–û–°–¢–û–ô –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""
        logging.info("üöÄ –ó–ê–ü–£–°–ö TOR –° –ü–†–û–°–¢–û–ô –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ï–ô")
        
        try:
            # –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Tor
            kill_existing_tor_processes()
            time.sleep(3)
            
            # –ü–æ–∏—Å–∫ Tor –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
            tor_executable = self.find_tor_executable()
            if not tor_executable:
                logging.info("‚ö† Tor –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏...")
                if not self.install_tor():
                    logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Tor")
                    return False
                tor_executable = self.find_tor_executable()
                if not tor_executable:
                    logging.error("‚ùå Tor –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏")
                    return False
            
            # –ù–∞—Ö–æ–¥–∏–º —Å–≤–æ–±–æ–¥–Ω—ã–µ –ø–æ—Ä—Ç—ã
            free_ports = find_free_port_range(9050, 2)
            if len(free_ports) < 2:
                logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ 2 —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ø–æ—Ä—Ç–∞")
                return False
            
            self.tor_port = free_ports[0]      # SOCKS –ø–æ—Ä—Ç
            self.control_port = free_ports[1]  # Control –ø–æ—Ä—Ç
            
            logging.info(f"üîå –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç—ã: SOCKS={self.tor_port}, Control={self.control_port}")
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–∞–Ω–Ω—ã—Ö Tor
            import tempfile
            import getpass
            
            try:
                current_user = getpass.getuser()
            except:
                current_user = "user"
            
            temp_dir = tempfile.gettempdir()
            tor_data_dir = os.path.join(temp_dir, f"tor_data_{current_user}_{os.getpid()}")
            
            # –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if os.path.exists(tor_data_dir):
                shutil.rmtree(tor_data_dir, ignore_errors=True)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            os.makedirs(tor_data_dir, mode=0o700, exist_ok=True)
            
            logging.info(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö Tor: {tor_data_dir}")
            
            # –ü–†–û–°–¢–ê–Ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Tor
            tor_config = f"""SocksPort {self.tor_port}
ControlPort {self.control_port}
DataDirectory {tor_data_dir}
Log notice stdout
"""
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            torrc_path = os.path.join(temp_dir, f"torrc_temp_{os.getpid()}")
            with open(torrc_path, "w") as f:
                f.write(tor_config)
            
            logging.debug(f"üìÑ –ö–æ–Ω—Ñ–∏–≥ Tor —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {torrc_path}")
            logging.info("üìÑ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Tor (–ü–†–û–°–¢–ê–Ø):")
            logging.info(tor_config)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º Tor
            cmd = [tor_executable, "-f", torrc_path]
            
            logging.info(f"üöÄ –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ Tor: {' '.join(cmd)}")
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –ª–æ–≥–æ–≤
            stdout_log = os.path.join(temp_dir, f"tor_stdout_{os.getpid()}.log")
            stderr_log = os.path.join(temp_dir, f"tor_stderr_{os.getpid()}.log")
            
            with open(stdout_log, "w") as stdout_file, \
                 open(stderr_log, "w") as stderr_file:
                
                if self.system == 'windows':
                    self.tor_process = subprocess.Popen(
                        cmd,
                        stdout=stdout_file,
                        stderr=stderr_file,
                        creationflags=subprocess.CREATE_NEW_PROCESS_GROUP
                    )
                else:
                    self.tor_process = subprocess.Popen(
                        cmd,
                        stdout=stdout_file,
                        stderr=stderr_file,
                        preexec_fn=os.setsid
                    )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
            self.tor_data_dir = tor_data_dir
            self.torrc_path = torrc_path
            self.stdout_log = stdout_log
            self.stderr_log = stderr_log
            
            logging.info(f"üîÑ PID –ø—Ä–æ—Ü–µ—Å—Å–∞ Tor: {self.tor_process.pid}")
            
            # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ Tor - –¢–ê–ô–ú–ê–£–¢ –ù–ï –ò–ó–ú–ï–ù–ï–ù - 20 –ú–ò–ù–£–¢
            logging.info("‚è≥ –û–ñ–ò–î–ê–ù–ò–ï –ó–ê–ü–£–°–ö–ê TOR (–¥–æ 20 –º–∏–Ω—É—Ç)...")
            port_ready = False
            bootstrap_complete = False
            
            for i in range(600):  # 600 –ø–æ–ø—ã—Ç–æ–∫ –ø–æ 2 —Å–µ–∫—É–Ω–¥—ã = 20 –º–∏–Ω—É—Ç
                time.sleep(2)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –µ—â–µ –∂–∏–≤
                if self.tor_process.poll() is not None:
                    logging.error(f"‚ùå –ü—Ä–æ—Ü–µ—Å—Å Tor –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º {self.tor_process.poll()}")
                    self.log_tor_errors()
                    return False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç
                if not port_ready and self.check_tor_port():
                    logging.info("‚úÖ Tor –ø–æ—Ä—Ç –≥–æ—Ç–æ–≤")
                    port_ready = True
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç bootstrap
                if port_ready and not bootstrap_complete:
                    try:
                        if os.path.exists(stdout_log):
                            with open(stdout_log, "r") as f:
                                log_content = f.read()
                                if "Bootstrapped 100%" in log_content:
                                    logging.info("‚úÖ Tor bootstrap –∑–∞–≤–µ—Ä—à–µ–Ω –Ω–∞ 100%")
                                    bootstrap_complete = True
                                    break
                                elif "Bootstrapped" in log_content:
                                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                                    import re
                                    matches = re.findall(r'Bootstrapped (\d+)%', log_content)
                                    if matches:
                                        last_percent = matches[-1]
                                        logging.info(f"üîÑ Tor bootstrap: {last_percent}%")
                    except:
                        pass
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
                if i % 30 == 0:  # –ö–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
                    elapsed_minutes = (i * 2) / 60
                    logging.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ Tor... ({elapsed_minutes:.1f}/20 –º–∏–Ω—É—Ç)")
            
            if not port_ready:
                logging.error("‚ùå Tor –ø–æ—Ä—Ç –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
                self.log_tor_errors()
                return False
            
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            logging.info("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–û–ï–î–ò–ù–ï–ù–ò–Ø...")
            if self.test_tor_connection():
                logging.info("‚úÖ TOR –£–°–ü–ï–®–ù–û –ó–ê–ü–£–©–ï–ù –ò –†–ê–ë–û–¢–ê–ï–¢!")
                return True
            else:
                logging.error("‚ùå Tor –∑–∞–ø—É—â–µ–Ω, –Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                self.log_tor_errors()
                return False
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Tor: {e}")
            return False

    def log_tor_errors(self):
        """–í—ã–≤–æ–¥ –æ—à–∏–±–æ–∫ Tor –∏–∑ –ª–æ–≥–æ–≤"""
        logging.info("üìã –ê–ù–ê–õ–ò–ó –õ–û–ì–û–í TOR...")
        
        try:
            stderr_log = getattr(self, 'stderr_log', './tor_stderr.log')
            stdout_log = getattr(self, 'stdout_log', './tor_stdout.log')
            
            if stderr_log and os.path.exists(stderr_log):
                with open(stderr_log, "r") as f:
                    stderr_content = f.read().strip()
                    if stderr_content:
                        logging.error(f"üö® –û–®–ò–ë–ö–ò TOR:\n{stderr_content}")
                    else:
                        logging.info("üìù –û—à–∏–±–∫–∏ Tor –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            
            if stdout_log and os.path.exists(stdout_log):
                with open(stdout_log, "r") as f:
                    stdout_content = f.read().strip()
                    if stdout_content:
                        logging.info(f"üìÑ –í–´–í–û–î TOR:\n{stdout_content}")
                        
                        # –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                        if "Bootstrapped 100%" in stdout_content:
                            logging.info("‚úÖ Tor —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –Ω–∞ 100%")
                        elif "Bootstrapped" in stdout_content:
                            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∫–∏
                            import re
                            matches = re.findall(r'Bootstrapped (\d+)%', stdout_content)
                            if matches:
                                last_percent = matches[-1]
                                logging.warning(f"‚ö† Tor –∑–∞–≥—Ä—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ {last_percent}%")
                        
                        if "Opening Socks listener" in stdout_content:
                            logging.info("‚úÖ SOCKS –ø—Ä–æ–∫—Å–∏ –∑–∞–ø—É—â–µ–Ω")
                    else:
                        logging.warning("üìù –í—ã–≤–æ–¥ Tor –ø—É—Å—Ç")
                        
        except Exception as e:
            logging.debug(f"‚ö† –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤ Tor: {e}")
    
    def stop_tor(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Tor"""
        try:
            if self.tor_process:
                logging.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Tor...")
                
                if self.system == 'windows':
                    self.tor_process.terminate()
                else:
                    try:
                        os.killpg(os.getpgid(self.tor_process.pid), 15)  # SIGTERM
                    except:
                        self.tor_process.terminate()
                
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è - –¢–ê–ô–ú–ê–£–¢ –ù–ï –ò–ó–ú–ï–ù–ï–ù
                try:
                    self.tor_process.wait(timeout=5)
                    logging.info("‚úì Tor –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                except subprocess.TimeoutExpired:
                    logging.warning("‚ö† –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ Tor...")
                    if self.system == 'windows':
                        self.tor_process.kill()
                    else:
                        try:
                            os.killpg(os.getpgid(self.tor_process.pid), 9)  # SIGKILL
                        except:
                            self.tor_process.kill()
                    
                    self.tor_process.wait(timeout=3)
                    logging.info("‚úì Tor –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                
                self.tor_process = None
                
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            temp_files = [
                getattr(self, 'torrc_path', None),
                getattr(self, 'stdout_log', None),
                getattr(self, 'stderr_log', None)
            ]
            
            for temp_file in temp_files:
                try:
                    if temp_file and os.path.exists(temp_file):
                        os.remove(temp_file)
                        logging.debug(f"üóë –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {temp_file}")
                except Exception as e:
                    logging.debug(f"‚ö† –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {temp_file}: {e}")
            
            # –û—á–∏—Å—Ç–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–∞–Ω–Ω—ã—Ö
            tor_data_dir = getattr(self, 'tor_data_dir', None)
            try:
                if tor_data_dir and os.path.exists(tor_data_dir):
                    shutil.rmtree(tor_data_dir, ignore_errors=True)
                    logging.debug(f"üóë –£–¥–∞–ª–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {tor_data_dir}")
            except Exception as e:
                logging.debug(f"‚ö† –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {tor_data_dir}: {e}")
                    
        except Exception as e:
            logging.debug(f"‚ö† –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Tor: {e}")

class TaskCoordinator:
    """–ö–ª–∞—Å—Å –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞–Ω–∏–π"""
    
    def __init__(self):
        self.task_types = ['youtube', 'surf', 'letters']
        self.current_cycle_tasks = []
        self.reset_cycle()
    
    def reset_cycle(self):
        """–°–±—Ä–æ—Å —Ü–∏–∫–ª–∞ –∑–∞–¥–∞–Ω–∏–π"""
        self.current_cycle_tasks = self.task_types.copy()
        random.shuffle(self.current_cycle_tasks)
        logging.info(f"üîÑ –ù–æ–≤—ã–π —Ü–∏–∫–ª –∑–∞–¥–∞–Ω–∏–π: {' ‚Üí '.join(self.current_cycle_tasks)}")
    
    def get_next_task_type(self) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–∏–ø–∞ –∑–∞–¥–∞–Ω–∏–π –∞–±—Å–æ–ª—é—Ç–Ω–æ —Å–ª—É—á–∞–π–Ω–æ"""
        if not self.current_cycle_tasks:
            self.reset_cycle()
        task_type = random.choice(self.current_cycle_tasks)
        self.current_cycle_tasks.remove(task_type)
        logging.info(f"üéØ –¢–µ–∫—É—â–∏–π —Ç–∏–ø –∑–∞–¥–∞–Ω–∏–π (—Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä): {task_type}")
        return task_type
    
    def is_cycle_complete(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ü–∏–∫–ª–∞"""
        return len(self.current_cycle_tasks) == 0

class YouTubeTaskHandler:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ YouTube –∑–∞–¥–∞–Ω–∏–π"""
    
    def __init__(self, driver, base_url):
        self.driver = driver
        self.base_url = base_url
    
    def get_tasks(self) -> List[Dict]:
        """–ü–æ–∏—Å–∫ YouTube –∑–∞–¥–∞–Ω–∏–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏"""
        logging.info("üìã –ü–æ–∏—Å–∫ YouTube –∑–∞–¥–∞–Ω–∏–π...")
        
        try:
            if "/tasks-youtube" not in self.driver.current_url:
                self.driver.get(f"{self.base_url}/tasks-youtube")
                time.sleep(1)  # –£—Å–∫–æ—Ä–µ–Ω–æ
            
            tasks_data = self.driver.execute_script("""
                var tasks = [];
                var rows = document.querySelectorAll("tr[class^='ads_']");
                
                for (var i = 0; i < rows.length; i++) {
                    try {
                        var row = rows[i];
                        var className = row.className;
                        var taskIdMatch = className.match(/ads_(\\d+)/);
                        
                        if (taskIdMatch) {
                            var taskId = taskIdMatch[1];
                            
                            var startButton = row.querySelector("span[id='link_ads_start_" + taskId + "']");
                            
                            if (startButton && startButton.onclick) {
                                var buttonText = startButton.textContent || startButton.innerText || '';
                                var buttonTitle = startButton.getAttribute('title') || '';
                                var parentText = startButton.parentElement ? startButton.parentElement.textContent : '';
                                
                                if (buttonText.includes('—Å–æ–∑–¥–∞—Ç—å') || buttonText.includes('—Ä–µ–∫–ª–∞–º') || 
                                    buttonTitle.includes('—Å–æ–∑–¥–∞—Ç—å') || buttonTitle.includes('—Ä–µ–∫–ª–∞–º') ||
                                    buttonText.includes('—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ') || buttonTitle.includes('—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ') ||
                                    parentText.includes('—Å–æ–∑–¥–∞—Ç—å') || parentText.includes('—Ä–µ–∫–ª–∞–º')) {
                                    continue;
                                }
                                
                                var onclick = startButton.getAttribute('onclick');
                                var timeMatch = onclick ? onclick.match(/start_youtube_new\\(\\d+,\\s*'(\\d+)'\\)/) : null;
                                var watchTime = timeMatch ? parseInt(timeMatch[1]) : 10;
                                var videoUrl = startButton.getAttribute('title') || 'unknown';
                                
                                tasks.push({
                                    id: taskId,
                                    watch_time: watchTime,
                                    video_url: videoUrl,
                                    button_selector: "tr.ads_" + taskId + " span[id='link_ads_start_" + taskId + "']",
                                    row_selector: "tr.ads_" + taskId
                                });
                            }
                        }
                    } catch (e) {
                        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–æ—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                    }
                }
                
                return tasks;
            """)
            
            tasks = []
            for task_data in tasks_data:
                task_info = {
                    'id': task_data['id'],
                    'watch_time': task_data['watch_time'],
                    'video_url': task_data['video_url'],
                    'button_selector': task_data['button_selector'],
                    'row_selector': task_data['row_selector']
                }
                tasks.append(task_info)
            
            logging.info(f"üìä –ù–∞–π–¥–µ–Ω–æ YouTube –∑–∞–¥–∞–Ω–∏–π: {len(tasks)}")
            return tasks
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è YouTube –∑–∞–¥–∞–Ω–∏–π: {e}")
            return []
    
    def execute_task(self, task: Dict) -> bool:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ YouTube –∑–∞–¥–∞–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∞–Ω—Ç–∏–±–æ—Ç –∑–∞—â–∏—Ç—ã"""
        task_id = task['id']
        
        logging.info(f"üéØ YouTube –∑–∞–¥–∞–Ω–∏–µ {task_id}")
        
        original_window = self.driver.current_window_handle
        
        try:
            if "/tasks-youtube" not in self.driver.current_url:
                self.driver.get(f"{self.base_url}/tasks-youtube")
                time.sleep(1)  # –£—Å–∫–æ—Ä–µ–Ω–æ
            
            # –ó–ê–ù–û–í–û –Ω–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ú–ò —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏
            try:
                task_row = self.driver.find_element(By.CSS_SELECTOR, task['row_selector'])
                start_button = self.driver.find_element(By.CSS_SELECTOR, task['button_selector'])
            except NoSuchElementException:
                logging.warning(f"‚ö† –≠–ª–µ–º–µ–Ω—Ç—ã –∑–∞–¥–∞–Ω–∏—è {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ)")
                return False
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–∞–¥–∞–Ω–∏—è {task_id}: {e}")
                return False
            
            # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –∑–∞–¥–∞–Ω–∏—é
            try:
                ActionChains(self.driver).move_to_element(task_row).perform()
            except:
                pass
            
            time.sleep(random.uniform(0.2, 0.8))  # –£—Å–∫–æ—Ä–µ–Ω–æ
            
            # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –∫–ª–∏–∫–æ–º - –°–õ–£–ß–ê–ô–ù–ê–Ø –ó–ê–î–ï–†–ñ–ö–ê
            pause = random.uniform(1, 5)  # –£–º–µ–Ω—å—à–µ–Ω–æ —Å 1-10
            logging.info(f"‚è≥ –°–ª—É—á–∞–π–Ω–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –∫–ª–∏–∫–æ–º: {pause:.1f}—Å")
            time.sleep(pause)
            
            # –ö–ª–∏–∫ –ø–æ –∑–∞–¥–∞–Ω–∏—é
            try:
                start_button.click()
            except ElementClickInterceptedException:
                self.driver.execute_script("arguments[0].click();", start_button)
            except Exception as e:
                logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ –∑–∞–¥–∞–Ω–∏—é {task_id}: {e}")
                return False
            
            time.sleep(1)  # –£—Å–∫–æ—Ä–µ–Ω–æ
            
            # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É
            all_windows = self.driver.window_handles
            new_window = None
            
            for window in all_windows:
                if window != original_window:
                    self.driver.switch_to.window(window)
                    new_window = window
                    break
            
            if not new_window:
                logging.error("‚ùå –ù–æ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω—Ç–∏–±–æ—Ç –∑–∞—â–∏—Ç—ã –≤–æ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
            if self.check_antibot_protection():
                logging.info("üö´ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∞–Ω—Ç–∏–±–æ—Ç –∑–∞—â–∏—Ç–∞, –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ YouTube –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏")
                try:
                    self.driver.close()
                    self.driver.switch_to.window(original_window)
                except:
                    pass
                return True  # –ó–∞—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∫–ª–∞–º—ã
            self.handle_youtube_ads()
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ —Ç–∞–π–º–µ—Ä—É Aviso
            if self.wait_for_aviso_timer_completion():
                logging.info("‚úÖ YouTube –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
                
                time.sleep(random.uniform(0.2, 1))  # –£—Å–∫–æ—Ä–µ–Ω–æ
                
                # –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –∏—Å—Ö–æ–¥–Ω—É—é –≤–∫–ª–∞–¥–∫—É
                try:
                    self.driver.close()
                    self.driver.switch_to.window(original_window)
                except:
                    try:
                        for window in self.driver.window_handles:
                            if window == original_window:
                                self.driver.switch_to.window(window)
                                break
                    except:
                        pass
                
                # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                logging.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã YouTube –∑–∞–¥–∞–Ω–∏–π...")
                self.driver.refresh()
                time.sleep(2)  # –£—Å–∫–æ—Ä–µ–Ω–æ
                
                return True
            else:
                logging.error(f"‚ùå YouTube –∑–∞–¥–∞–Ω–∏–µ {task_id} –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                return False
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ YouTube –∑–∞–¥–∞–Ω–∏—è {task_id}: {e}")
            return False
        finally:
            # –û—á–∏—Å—Ç–∫–∞ –æ–∫–æ–Ω –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
            try:
                current_windows = self.driver.window_handles
                if len(current_windows) > 1:
                    for window in current_windows:
                        if window != original_window:
                            try:
                                self.driver.switch_to.window(window)
                                self.driver.close()
                            except:
                                pass
                    
                    try:
                        self.driver.switch_to.window(original_window)
                    except:
                        available_windows = self.driver.window_handles
                        if available_windows:
                            self.driver.switch_to.window(available_windows[0])
            except Exception as cleanup_error:
                logging.debug(f"‚ö† –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –æ–∫–æ–Ω: {cleanup_error}")
    
    def check_antibot_protection(self) -> bool:
        """–ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ê–Ω—Ç–∏–±–æ—Ç –∑–∞—â–∏—Ç–∞ YouTube"""
        try:
            logging.info("üîç –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω—Ç–∏–±–æ—Ç –∑–∞—â–∏—Ç—ã...")
            
            # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ
            try:
                main_check = self.driver.execute_script("""
                    var antibotSelectors = [
                        '.ytp-error-content-wrap-reason > span:nth-child(1)',
                        '.ytp-error-content-wrap-reason',
                        '.ytp-error-content-wrap',
                        '.ytp-error-content',
                        '.ytp-error'
                    ];
                    
                    for (var i = 0; i < antibotSelectors.length; i++) {
                        try {
                            var elements = document.querySelectorAll(antibotSelectors[i]);
                            for (var j = 0; j < elements.length; j++) {
                                var element = elements[j];
                                if (element.offsetParent !== null) {
                                    var text = element.textContent || element.innerText || '';
                                    if (text.length > 0) {
                                        return {
                                            found: true,
                                            selector: antibotSelectors[i],
                                            text: text.substring(0, 100)
                                        };
                                    }
                                }
                            }
                        } catch (e) {
                            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–∫–∏
                        }
                    }
                    
                    return {found: false};
                """)
                
                if main_check['found']:
                    logging.info(f"üö´ –ê–Ω—Ç–∏–±–æ—Ç –∑–∞—â–∏—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ: {main_check['text']}")
                    return True
                    
            except Exception as e:
                logging.debug(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –≥–ª–∞–≤–Ω–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ: {e}")
            
            # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ YouTube iframe
            try:
                iframe_check = self.driver.execute_script("""
                    var iframes = document.getElementsByTagName('iframe');
                    
                    for (var i = 0; i < iframes.length; i++) {
                        var iframe = iframes[i];
                        var src = iframe.src || '';
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ YouTube iframe
                        if (src.includes('youtube.com')) {
                            try {
                                var iframeDoc = iframe.contentDocument || iframe.contentWindow.document;
                                if (iframeDoc) {
                                    var antibotSelectors = [
                                        '.ytp-error-content-wrap-reason > span:nth-child(1)',
                                        '.ytp-error-content-wrap-reason',
                                        '.ytp-error-content-wrap',
                                        '.ytp-error-content',
                                        '.ytp-error'
                                    ];
                                    
                                    for (var s = 0; s < antibotSelectors.length; s++) {
                                        try {
                                            var elements = iframeDoc.querySelectorAll(antibotSelectors[s]);
                                            for (var e = 0; e < elements.length; e++) {
                                                var element = elements[e];
                                                if (element.offsetParent !== null) {
                                                    var text = element.textContent || element.innerText || '';
                                                    if (text.length > 0) {
                                                        return {
                                                            found: true,
                                                            selector: antibotSelectors[s],
                                                            text: text.substring(0, 100),
                                                            iframe_src: src
                                                        };
                                                    }
                                                }
                                            }
                                        } catch (e) {
                                            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–∫–∏
                                        }
                                    }
                                }
                            } catch (e) {
                                // –ù–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ iframe - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                            }
                        }
                    }
                    
                    return {found: false};
                """)
                
                if iframe_check['found']:
                    logging.info(f"üö´ –ê–Ω—Ç–∏–±–æ—Ç –∑–∞—â–∏—Ç–∞ –≤ iframe: {iframe_check['text']}")
                    return True
                    
            except Exception as e:
                logging.debug(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ iframe: {e}")
            
            # –ï—Å–ª–∏ –±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞ - –¥–µ–ª–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ switch_to.frame
            try:
                iframes = self.driver.find_elements(By.TAG_NAME, "iframe")
                
                for i, iframe in enumerate(iframes):
                    try:
                        src = iframe.get_attribute('src') or ''
                        if 'youtube.com' not in src:
                            continue
                        
                        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ iframe
                        self.driver.switch_to.frame(iframe)
                        
                        # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ iframe
                        frame_check = self.driver.execute_script("""
                            try {
                                var antibotSelectors = [
                                    '.ytp-error-content-wrap-reason > span:nth-child(1)',
                                    '.ytp-error-content-wrap-reason',
                                    '.ytp-error-content-wrap',
                                    '.ytp-error-content',
                                    '.ytp-error'
                                ];
                                
                                for (var i = 0; i < antibotSelectors.length; i++) {
                                    try {
                                        var elements = document.querySelectorAll(antibotSelectors[i]);
                                        for (var j = 0; j < elements.length; j++) {
                                            var element = elements[j];
                                            if (element.offsetParent !== null) {
                                                var text = element.textContent || element.innerText || '';
                                                if (text.length > 0) {
                                                    return {
                                                        found: true,
                                                        selector: antibotSelectors[i],
                                                        text: text.substring(0, 100)
                                                    };
                                                }
                                            }
                                        }
                                    } catch (e) {
                                        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–∫–∏
                                    }
                                }
                                
                                return {found: false};
                            } catch (e) {
                                return {found: false, error: e.message};
                            }
                        """)
                        
                        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –¥–æ–∫—É–º–µ–Ω—Ç—É
                        self.driver.switch_to.default_content()
                        
                        if frame_check['found']:
                            logging.info(f"üö´ –ê–Ω—Ç–∏–±–æ—Ç –∑–∞—â–∏—Ç–∞ –≤ iframe #{i}: {frame_check['text']}")
                            return True
                            
                    except Exception as e:
                        try:
                            self.driver.switch_to.default_content()
                        except:
                            pass
                        continue
                        
            except Exception as e:
                logging.debug(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ switch_to.frame: {e}")
                try:
                    self.driver.switch_to.default_content()
                except:
                    pass
            
            # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞ (—Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏)
            try:
                page_source = self.driver.page_source.lower()
                critical_errors = [
                    'ytp-error-content-wrap',
                    'video unavailable',
                    'playback error',
                    'this video is not available'
                ]
                
                for error in critical_errors:
                    if error in page_source:
                        logging.info(f"üö´ –ê–Ω—Ç–∏–±–æ—Ç –∑–∞—â–∏—Ç–∞ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –∫–æ–¥–µ: '{error}'")
                        return True
                        
            except Exception as e:
                logging.debug(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞: {e}")
            
            logging.info("‚úÖ –ê–Ω—Ç–∏–±–æ—Ç –∑–∞—â–∏—Ç–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞")
            return False
            
        except Exception as e:
            logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–Ω—Ç–∏–±–æ—Ç –∑–∞—â–∏—Ç—ã: {e}")
            try:
                self.driver.switch_to.default_content()
            except:
                pass
            return False
    
    def handle_youtube_ads(self) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∫–ª–∞–º—ã YouTube"""
        logging.info("üì∫ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∫–ª–∞–º—ã...")
        
        try:
            time.sleep(1)  # –£—Å–∫–æ—Ä–µ–Ω–æ
            
            ad_status = self.driver.execute_script("""
                var adBadges = document.querySelectorAll('span.ytp-ad-badge--clean-player, [id*="ad-badge"], .ytp-ad-badge');
                var hasAd = false;
                
                for (var i = 0; i < adBadges.length; i++) {
                    if (adBadges[i].offsetParent !== null) {
                        hasAd = true;
                        break;
                    }
                }
                
                if (!hasAd) {
                    return {status: 'no_ad'};
                }
                
                var skipButtons = document.querySelectorAll('.ytp-ad-skip-button, .ytp-ad-skip-button-modern, [class*="skip"]');
                for (var i = 0; i < skipButtons.length; i++) {
                    if (skipButtons[i].offsetParent !== null && !skipButtons[i].disabled) {
                        return {status: 'skip_available', element: skipButtons[i]};
                    }
                }
                
                return {status: 'wait_ad'};
            """)
            
            if ad_status['status'] == 'no_ad':
                return True
            
            if ad_status['status'] == 'skip_available':
                self.driver.execute_script("arguments[0].click();", ad_status['element'])
                logging.info("‚è≠ –†–µ–∫–ª–∞–º–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞")
                time.sleep(0.5)  # –£—Å–∫–æ—Ä–µ–Ω–æ
                return True
            
            logging.info("üì∫ –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã...")
            
            for attempt in range(30):  # –£—Å–∫–æ—Ä–µ–Ω–æ
                ad_finished = self.driver.execute_script("""
                    var adBadges = document.querySelectorAll('span.ytp-ad-badge--clean-player, [id*="ad-badge"], .ytp-ad-badge');
                    for (var i = 0; i < adBadges.length; i++) {
                        if (adBadges[i].offsetParent !== null) {
                            return false;
                        }
                    }
                    
                    var skipButtons = document.querySelectorAll('.ytp-ad-skip-button, .ytp-ad-skip-button-modern, [class*="skip"]');
                    for (var i = 0; i < skipButtons.length; i++) {
                        if (skipButtons[i].offsetParent !== null && !skipButtons[i].disabled) {
                            skipButtons[i].click();
                            return true;
                        }
                    }
                    
                    return true;
                """)
                
                if ad_finished:
                    logging.info("‚úÖ –†–µ–∫–ª–∞–º–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å")
                    return True
                
                time.sleep(1)
            
            logging.info("‚úÖ –†–µ–∫–ª–∞–º–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
            return True
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∫–ª–∞–º—ã: {e}")
            return True
    
    def click_center_screen(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –∑–∞–ø—É—Å–∫ –≤–∏–¥–µ–æ - –û–î–ò–ù –∫–ª–∏–∫"""
        try:
            logging.info("üñ± –ó–∞–ø—É—Å–∫ –≤–∏–¥–µ–æ...")
            
            # –ü–æ–∏—Å–∫ –∏ —Ä–∞–±–æ—Ç–∞ —Å iframe - –ü–†–ò–û–†–ò–¢–ï–¢
            iframe_success = False
            try:
                iframes = self.driver.find_elements(By.TAG_NAME, "iframe")
                logging.info(f"üîç –ù–∞–π–¥–µ–Ω–æ iframe'–æ–≤: {len(iframes)}")
                
                for i, iframe in enumerate(iframes):
                    try:
                        self.driver.switch_to.frame(iframe)
                        logging.info(f"‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ iframe {i}")
                        
                        # –û–î–ò–ù –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
                        success = self.driver.execute_script("""
                            var playButtons = document.querySelectorAll(
                                '.ytp-large-play-button, .ytp-play-button, [aria-label*="Play"], [aria-label*="–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏"]'
                            );
                            
                            for (var i = 0; i < playButtons.length; i++) {
                                try {
                                    var button = playButtons[i];
                                    if (button.offsetParent !== null) {
                                        button.click();
                                        return true;
                                    }
                                } catch (e) {
                                    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–∫–∏
                                }
                            }
                            
                            return false;
                        """)
                        
                        if success:
                            logging.info("‚úÖ –ö–Ω–æ–ø–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –Ω–∞–∂–∞—Ç–∞ –≤ iframe")
                            iframe_success = True
                            
                        self.driver.switch_to.default_content()
                        
                        if iframe_success:
                            break
                        
                    except Exception as e:
                        self.driver.switch_to.default_content()
                        continue
                        
            except Exception as e:
                logging.info(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–±–æ—Ç–∞—Ç—å —Å iframe: {e}")
                self.driver.switch_to.default_content()
            
            # –ï—Å–ª–∏ iframe —Å—Ä–∞–±–æ—Ç–∞–ª - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if iframe_success:
                time.sleep(1)
                status = self.check_video_status()
                if status['videos_playing'] > 0:
                    logging.info(f"‚úÖ –í–∏–¥–µ–æ –∑–∞–ø—É—â–µ–Ω–æ —á–µ—Ä–µ–∑ iframe! –ò–≥—Ä–∞—é—â–∏—Ö: {status['videos_playing']}")
                    return
                else:
                    logging.warning("‚ö† Iframe –∫–ª–∏–∫ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª –≤–∏–¥–µ–æ, –ø—Ä–æ–±—É–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π –∫–ª–∏–∫...")
            
            # –ï—Å–ª–∏ iframe –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª - –û–î–ò–ù —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π –∫–ª–∏–∫
            logging.info("üñ± –í—ã–ø–æ–ª–Ω—è–µ–º –û–î–ò–ù —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π –∫–ª–∏–∫...")
            
            viewport_size = self.driver.get_window_size()
            center_x = viewport_size['width'] // 2
            center_y = viewport_size['height'] // 2
            
            try:
                actions = ActionChains(self.driver)
                actions.move_by_offset(center_x - viewport_size['width']//2, center_y - viewport_size['height']//2)
                actions.click()
                actions.perform()
                logging.info(f"üñ± –í—ã–ø–æ–ª–Ω–µ–Ω —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π –∫–ª–∏–∫ –≤ —Ü–µ–Ω—Ç—Ä: ({center_x}, {center_y})")
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—É—Ä—Å–æ—Ä –æ–±—Ä–∞—Ç–Ω–æ
                actions = ActionChains(self.driver)
                actions.move_by_offset(-(center_x - viewport_size['width']//2), -(center_y - viewport_size['height']//2))
                actions.perform()
                
            except Exception as e:
                logging.warning(f"‚ö† –û—à–∏–±–∫–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ –∫–ª–∏–∫–∞: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            time.sleep(1)
            status = self.check_video_status()
            if status['videos_playing'] > 0:
                logging.info(f"‚úÖ –í–∏–¥–µ–æ –∑–∞–ø—É—â–µ–Ω–æ! –ò–≥—Ä–∞—é—â–∏—Ö: {status['videos_playing']}")
                return
            
            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            try:
                from selenium.webdriver.common.keys import Keys
                body = self.driver.find_element(By.TAG_NAME, "body")
                body.send_keys(Keys.SPACE)
                logging.info("‚å® –ù–∞–∂–∞—Ç–∞ –∫–ª–∞–≤–∏—à–∞ SPACE")
                time.sleep(0.5)
                
            except Exception as e:
                logging.warning(f"‚ö† –û—à–∏–±–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã: {e}")
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–∏–¥–µ–æ: {e}")
            try:
                self.driver.switch_to.default_content()
            except:
                pass
    
    def check_video_status(self) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤–∏–¥–µ–æ"""
        try:
            return self.driver.execute_script("""
                var result = {
                    videos_found: 0,
                    videos_playing: 0,
                    iframes_found: 0
                };
                
                var videos = document.getElementsByTagName('video');
                result.videos_found = videos.length;
                
                for (var i = 0; i < videos.length; i++) {
                    if (!videos[i].paused && videos[i].currentTime > 0) {
                        result.videos_playing++;
                    }
                }
                
                result.iframes_found = document.getElementsByTagName('iframe').length;
                
                return result;
            """)
        except:
            return {'videos_found': 0, 'videos_playing': 0, 'iframes_found': 0}
    
    def wait_for_aviso_timer_completion(self) -> bool:
        """–û–∂–∏–¥–∞–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ Aviso —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        logging.info("‚è± –û–∂–∏–¥–∞–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ Aviso...")
        
        try:
            last_timer_value = None
            same_value_counter = 0
            check_count = 0
            video_was_playing = False
            restart_attempts = 0
            video_started_logged = False
            
            while True:
                check_count += 1
                
                timer_status = self.driver.execute_script("""
                    var timerElement = document.querySelector('span.timer#tmr');
                    if (timerElement) {
                        var timerText = timerElement.textContent.trim();
                        if (/^\\d+$/.test(timerText)) {
                            return {status: 'timer_found', value: parseInt(timerText)};
                        }
                    }
                    
                    var completionElements = document.querySelectorAll('span');
                    for (var i = 0; i < completionElements.length; i++) {
                        var text = completionElements[i].textContent;
                        if (text.includes('–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞') && text.includes('–Ω–∞—á–∏—Å–ª–µ–Ω–æ')) {
                            return {status: 'completed', message: text.trim()};
                        }
                    }
                    
                    return {status: 'not_found'};
                """)
                
                if timer_status['status'] == 'completed':
                    logging.info(f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {timer_status['message']}")
                    return True
                
                if timer_status['status'] == 'timer_found':
                    current_timer_value = timer_status['value']
                    
                    if check_count % 5 == 0:  # –ß–∞—â–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
                        logging.info(f"‚è∞ –¢–∞–π–º–µ—Ä: {current_timer_value}—Å")
                    
                    if last_timer_value is not None:
                        if current_timer_value == last_timer_value:
                            same_value_counter += 1
                            
                            if same_value_counter >= 5:  # –ë—ã—Å—Ç—Ä–µ–µ —Ä–µ–∞–≥–∏—Ä—É–µ–º
                                
                                if video_was_playing:
                                    restart_attempts += 1
                                    logging.warning(f"‚è∏ –í–∏–¥–µ–æ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–æ—Å—å! –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ {restart_attempts}/3")
                                    
                                    if restart_attempts >= 3:
                                        logging.error("üí• –í–∏–¥–µ–æ –Ω–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è! –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
                                        self.driver.refresh()
                                        time.sleep(2)  # –£—Å–∫–æ—Ä–µ–Ω–æ
                                        
                                        self.handle_youtube_ads()
                                        
                                        restart_attempts = 0
                                        video_was_playing = False
                                        video_started_logged = False
                                        last_timer_value = None
                                        same_value_counter = 0
                                        continue
                                else:
                                    if not video_started_logged:
                                        logging.warning("‚è∏ –í–∏–¥–µ–æ –Ω–∞ –ø–∞—É–∑–µ! –ó–∞–ø—É—Å–∫–∞–µ–º...")
                                
                                self.click_center_screen()
                                same_value_counter = 0
                        else:
                            if same_value_counter > 0:
                                if not video_started_logged:
                                    logging.info("‚ñ∂ –í–∏–¥–µ–æ –∑–∞–ø—É—Å—Ç–∏–ª–æ—Å—å")
                                    video_started_logged = True
                                video_was_playing = True
                                restart_attempts = 0
                            same_value_counter = 0
                    
                    last_timer_value = current_timer_value
                    
                    if current_timer_value <= 0:
                        logging.info("‚úÖ –¢–∞–π–º–µ—Ä –¥–æ—Å—Ç–∏–≥ –Ω—É–ª—è")
                        break
                
                time.sleep(0.5)
                
                if check_count > 600:  # –¢–∞–π–º–∞—É—Ç –Ω–µ –∏–∑–º–µ–Ω–µ–Ω
                    logging.warning("‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
                    return False
            
            time.sleep(0.5)  # –£—Å–∫–æ—Ä–µ–Ω–æ
            final_check = self.driver.execute_script("""
                var completionElements = document.querySelectorAll('span');
                for (var i = 0; i < completionElements.length; i++) {
                    var text = completionElements[i].textContent;
                    if (text.includes('–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞') && text.includes('–Ω–∞—á–∏—Å–ª–µ–Ω–æ')) {
                        return text.trim();
                    }
                }
                return null;
            """)
            
            if final_check:
                logging.info(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: {final_check}")
            
            return True
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–∞–π–º–µ—Ä–∞: {e}")
            return False

class SurfTaskHandler:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞–Ω–∏–π –Ω–∞ —Å–µ—Ä—Ñ–∏–Ω–≥"""
    
    def __init__(self, driver, base_url):
        self.driver = driver
        self.base_url = base_url
        self.failed_task_ids = set()  # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π —Å –æ—à–∏–±–∫–∞–º–∏
    
    def get_tasks(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –Ω–∞ —Å–µ—Ä—Ñ–∏–Ω–≥ —Å –ø–æ–¥—Å—á–µ—Ç–æ–º –æ–±—â–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∫–∞"""
        logging.info("üåä –ü–æ–∏—Å–∫ –∑–∞–¥–∞–Ω–∏–π –Ω–∞ —Å–µ—Ä—Ñ–∏–Ω–≥...")
        
        try:
            if "/tasks-surf" not in self.driver.current_url:
                self.driver.get(f"{self.base_url}/tasks-surf")
                time.sleep(1)
            
            surf_tasks_data = self.driver.execute_script("""
                var tasks = [];
                var totalEarnings = 0;
                var rows = document.querySelectorAll("tr[class^='de_']");
                
                for (var i = 0; i < rows.length; i++) {
                    try {
                        var row = rows[i];
                        var className = row.className;
                        var taskIdMatch = className.match(/de_(\\d+)/);
                        
                        if (taskIdMatch) {
                            var taskId = taskIdMatch[1];
                            var startDiv = row.querySelector("div[id='start-serf-" + taskId + "']");
                            
                            if (startDiv) {
                                var link = startDiv.querySelector("a");
                                if (link) {
                                    var title = link.textContent.trim();
                                    var url = link.getAttribute('title') || link.getAttribute('href') || 'unknown';
                                    
                                    // –ü–∞—Ä—Å–∏–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                                    var priceElement = row.querySelector('td[style*="text-align:right"] span[title="–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"]');
                                    var price = 0;
                                    if (priceElement) {
                                        var priceText = priceElement.textContent.trim();
                                        var priceMatch = priceText.match(/([0-9.,]+)/);
                                        if (priceMatch) {
                                            price = parseFloat(priceMatch[1].replace(',', '.'));
                                            totalEarnings += price;
                                        }
                                    }
                                    
                                    tasks.push({
                                        id: taskId,
                                        title: title,
                                        url: url,
                                        price: price,
                                        row_class: className,
                                        start_div_id: "start-serf-" + taskId
                                    });
                                }
                            }
                        }
                    } catch (e) {
                        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–æ—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                    }
                }
                
                return {
                    tasks: tasks,
                    totalEarnings: totalEarnings
                };
            """)
            
            tasks = []
            total_earnings = surf_tasks_data.get('totalEarnings', 0)
            
            for task_data in surf_tasks_data.get('tasks', []):
                try:
                    task_info = {
                        'id': task_data['id'],
                        'title': task_data['title'],
                        'url': task_data['url'],
                        'price': task_data['price'],
                        'row_class': task_data['row_class'],
                        'start_div_id': task_data['start_div_id']
                    }
                    tasks.append(task_info)
                except Exception as e:
                    logging.debug(f"‚ö† –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è —Å–µ—Ä—Ñ–∏–Ω–≥–∞: {e}")
                    continue
            
            logging.info(f"üåä –ù–∞–π–¥–µ–Ω–æ —Å–µ—Ä—Ñ–∏–Ω–≥ –∑–∞–¥–∞–Ω–∏–π: {len(tasks)}")
            logging.info(f"üí∞ –û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –∑–∞ —Å–µ—Ä—Ñ–∏–Ω–≥: {total_earnings:.4f} —Ä—É–±.")
            return tasks
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä—Ñ–∏–Ω–≥ –∑–∞–¥–∞–Ω–∏–π: {e}")
            return []
    
    def execute_task(self, task: Dict) -> bool:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Å–µ—Ä—Ñ–∏–Ω–≥ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ—à–∏–±–æ–∫"""
        task_id = task['id']
        logging.info(f"üåä –°–µ—Ä—Ñ–∏–Ω–≥ –∑–∞–¥–∞–Ω–∏–µ {task_id}: {task['title'][:50]}...")
        
        original_window = self.driver.current_window_handle
        
        try:
            if "/tasks-surf" not in self.driver.current_url:
                self.driver.get(f"{self.base_url}/tasks-surf")
                time.sleep(1)
            
            try:
                task_row = self.driver.find_element(By.CSS_SELECTOR, f"tr.{task['row_class']}")
                start_div = self.driver.find_element(By.ID, task['start_div_id'])
                start_link = start_div.find_element(By.TAG_NAME, "a")
            except NoSuchElementException:
                logging.warning(f"‚ö† –≠–ª–µ–º–µ–Ω—Ç—ã —Å–µ—Ä—Ñ–∏–Ω–≥ –∑–∞–¥–∞–Ω–∏—è {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return False
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–µ—Ä—Ñ–∏–Ω–≥ –∑–∞–¥–∞–Ω–∏—è {task_id}: {e}")
                return False
            
            try:
                # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —ç–ª–µ–º–µ–Ω—Ç—É
                self.driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", task_row)
                time.sleep(0.5)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫—É
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç–∞
                is_visible = self.driver.execute_script("""
                    var elem = arguments[0];
                    var rect = elem.getBoundingClientRect();
                    return (
                        rect.top >= 0 &&
                        rect.left >= 0 &&
                        rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&
                        rect.right <= (window.innerWidth || document.documentElement.clientWidth)
                    );
                """, start_link)
                
                if not is_visible:
                    logging.warning(f"‚ö† –≠‡≤Æ Element {task_id} –≤—Å–µ –µ—â–µ –Ω–µ –≤ –∑–æ–Ω–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏")
                    return False
                    
                ActionChains(self.driver).move_to_element(task_row).perform()
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏/–Ω–∞–≤–µ–¥–µ–Ω–∏—è –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç {task_id}: {e}")
            
            time.sleep(random.uniform(0.1, 0.5))
            
            # –°–õ–£–ß–ê–ô–ù–ê–Ø –ó–ê–î–ï–†–ñ–ö–ê –ø–µ—Ä–µ–¥ –∫–ª–∏–∫–æ–º
            pause = random.uniform(1, 5)
            logging.info(f"‚è≥ –°–ª—É—á–∞–π–Ω–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –∫–ª–∏–∫–æ–º {pause:.1f}—Å")
            time.sleep(pause)
            
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –∫–ª–∏–∫–Ω—É—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
                start_link.click()
            except ElementClickInterceptedException:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º JavaScript-–∫–ª–∏–∫
                self.driver.execute_script("arguments[0].click();", start_link)
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —Å–µ—Ä—Ñ–∏–Ω–≥ –∑–∞–¥–∞–Ω–∏—é {task_id}: {e}")
                return False
            
            time.sleep(2)
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–∫–∏: —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
            if self.check_task_error_for_current_task(task_id):
                logging.warning(f"‚ö† –û—à–∏–±–∫–∞ –∑–∞—è–≤–∫–∏ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {task_id}, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É")
                self.failed_task_ids.add(task_id)
                return False
            
            wait = WebDriverWait(self.driver, 15)
            
            try:
                start_viewing_button = wait.until(
                    EC.element_to_be_clickable((By.CLASS_NAME, "start-yes-serf"))
                )
                
                # –°–õ–£–ß–ê–ô–ù–ê–Ø –ó–ê–î–ï–†–ñ–ö–ê –ø–µ—Ä–µ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
                confirm_pause = random.uniform(0.1, 2)
                logging.info(f"‚è≥ –°–ª—É—á–∞–π–Ω–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {confirm_pause:.1f}—Å")
                time.sleep(confirm_pause)
                
                # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –∫–Ω–æ–ø–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                self.driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", start_viewing_button)
                time.sleep(0.5)
                
                start_viewing_button.click()
                logging.info("‚úÖ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É'")
            except:
                # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
                if self.check_task_error_for_current_task(task_id):
                    logging.warning(f"‚ö† –û—à–∏–±–∫–∞ –∑–∞—è–≤–∫–∏ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {task_id} –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏")
                    self.failed_task_ids.add(task_id)
                    return False
                
                logging.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ '–ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É'")
                return False
            
            time.sleep(5)
            
            # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤–æ–µ –æ–∫–Ω–æ
            all_windows = self.driver.window_handles
            new_window = None
            for window in all_windows:
                if window != original_window:
                    self.driver.switch_to.window(window)
                    new_window = window
                    break
            
            if not new_window:
                logging.error("‚ùå –ù–æ–≤–æ–µ –æ–∫–Ω–æ —Å–µ—Ä—Ñ–∏–Ω–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return False
            
            logging.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ —Ç–∞–π–º–µ—Ä–∞/–∫–Ω–æ–ø–∫–∏ –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ...")
            
            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –≤ frame –Ω–∞ —Å–∞–π—Ç–µ
            if self.wait_for_surf_timer_completion():
                logging.info("‚úÖ –°–µ—Ä—Ñ–∏–Ω–≥ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
                
                time.sleep(random.uniform(0.2, 1))
                
                try:
                    self.driver.close()
                    self.driver.switch_to.window(original_window)
                except:
                    try:
                        for window in self.driver.window_handles:
                            if window == original_window:
                                self.driver.switch_to.window(window)
                                break
                    except:
                        pass
                
                logging.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–µ—Ä—Ñ–∏–Ω–≥–∞...")
                self.driver.refresh()
                time.sleep(2)
                
                return True
            else:
                logging.error(f"‚ùå –°–µ—Ä—Ñ–∏–Ω–≥ –∑–∞–¥–∞–Ω–∏–µ {task_id} –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                return False
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä—Ñ–∏–Ω–≥ –∑–∞–¥–∞–Ω–∏—è {task_id}: {e}")
            return False
        finally:
            try:
                current_windows = self.driver.window_handles
                if len(current_windows) > 1:
                    for window in current_windows:
                        if window != original_window:
                            try:
                                self.driver.switch_to.window(window)
                                self.driver.close()
                            except:
                                pass
                    
                    try:
                        self.driver.switch_to.window(original_window)
                    except:
                        available_windows = self.driver.window_handles
                        if available_windows:
                            self.driver.switch_to.window(available_windows[0])
            except Exception as cleanup_error:
                logging.debug(f"‚ö† –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –æ–∫–æ–Ω —Å–µ—Ä—Ñ–∏–Ω–≥–∞: {cleanup_error}")
    
    def check_task_error_for_current_task(self, task_id: str) -> bool:
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–∫–∏: —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
        try:
            # –ò—â–µ–º –æ—à–∏–±–∫—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
            error_check_result = self.driver.execute_script("""
                var taskId = arguments[0];
                var result = {
                    has_error: false,
                    error_text: '',
                    task_specific_error: false
                };
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–µ –æ—à–∏–±–∫–∏
                var generalErrors = document.querySelectorAll('.start-error-serf');
                for (var i = 0; i < generalErrors.length; i++) {
                    var errorElement = generalErrors[i];
                    if (errorElement.offsetParent !== null) {
                        result.has_error = true;
                        result.error_text = errorElement.textContent.trim();
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω–∞ –ª–∏ –æ—à–∏–±–∫–∞ —Å –Ω–∞—à–∏–º –∑–∞–¥–∞–Ω–∏–µ–º
                        var parentRow = errorElement.closest('tr');
                        if (parentRow) {
                            var taskDiv = parentRow.querySelector('#start-serf-' + taskId);
                            if (taskDiv) {
                                result.task_specific_error = true;
                                break;
                            }
                        }
                    }
                }
                
                return result;
            """, task_id)
            
            if error_check_result['task_specific_error']:
                logging.info(f"üö´ –ù–∞–π–¥–µ–Ω–∞ –æ—à–∏–±–∫–∞ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {task_id}: {error_check_result['error_text']}")
                return True
            elif error_check_result['has_error']:
                logging.debug(f"‚Ñπ –ù–∞–π–¥–µ–Ω–∞ –æ–±—â–∞—è –æ—à–∏–±–∫–∞ (–Ω–µ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {task_id}): {error_check_result['error_text']}")
                return False
            else:
                return False
                
        except Exception as e:
            logging.debug(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –æ—à–∏–±–∫–∏ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {task_id}: {e}")
            return False
    
    def check_all_tasks_failed(self, available_tasks: List[Dict]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –æ—à–∏–±–∫–æ–π"""
        if not available_tasks:
            return True
        
        available_task_ids = set(task['id'] for task in available_tasks)
        failed_count = len(self.failed_task_ids.intersection(available_task_ids))
        
        if failed_count == len(available_tasks):
            logging.info(f"‚ö† –í—Å–µ {len(available_tasks)} —Å–µ—Ä—Ñ–∏–Ω–≥ –∑–∞–¥–∞–Ω–∏–π –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –æ—à–∏–±–∫–æ–π, —Å—á–∏—Ç–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏")
            return True
        
        return False
    
    def wait_for_surf_timer_completion(self) -> bool:
        """–û–∂–∏–¥–∞–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ —Å–µ—Ä—Ñ–∏–Ω–≥–∞ –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        logging.info("‚è± –û–∂–∏–¥–∞–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ —Å–µ—Ä—Ñ–∏–Ω–≥–∞ –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...")
        
        try:
            max_wait_time = 150
            checks_count = 0
            
            logging.info("üîÑ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
            time.sleep(2)
            
            while checks_count < max_wait_time:
                checks_count += 1
                
                # –ü–æ–∏—Å–∫ –≤ frame
                frame_result = self.search_in_frames_with_names()
                
                if frame_result['button_found']:
                    logging.info("‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ frame!")
                    return True
                
                if frame_result['timer_found']:
                    timer_value = frame_result.get('timer_value')
                    if timer_value is not None:
                        if checks_count % 5 == 0:
                            logging.info(f"‚è∞ –¢–∞–π–º–µ—Ä —Å–µ—Ä—Ñ–∏–Ω–≥–∞ (frame): {timer_value}—Å")
                        
                        if timer_value <= 0:
                            logging.info("‚úÖ –¢–∞–π–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω")
                            return True
                
                if checks_count % 10 == 0:
                    logging.info("‚è≥ –ü–æ–∏—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –≤ frame...")
                
                time.sleep(1)
            
            logging.error("‚ùå –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ")
            return False
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞ —Å–µ—Ä—Ñ–∏–Ω–≥–∞: {e}")
            return False
    
    def search_in_frames_with_names(self) -> Dict:
        """–ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ frame - –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø"""
        result = {
            'timer_found': False,
            'timer_value': None,
            'captcha_found': False,
            'button_found': False,
            'iframe_switched': False
        }
        
        try:
            # –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ frame
            frame_info = self.driver.execute_script("""
                var frames = [];
                var iframes = document.getElementsByTagName('iframe');
                var frameElements = document.getElementsByTagName('frame');
                
                for (var i = 0; i < iframes.length; i++) {
                    frames.push({
                        type: 'iframe',
                        index: i,
                        name: iframes[i].name || '',
                        src: iframes[i].src || '',
                        id: iframes[i].id || ''
                    });
                }
                
                for (var i = 0; i < frameElements.length; i++) {
                    frames.push({
                        type: 'frame',
                        index: i,
                        name: frameElements[i].name || '',
                        src: frameElements[i].src || '',
                        id: frameElements[i].id || ''
                    });
                }
                
                return frames;
            """)
            
            for frame in frame_info:
                try:
                    frame_type = frame['type']
                    frame_name = frame['name']
                    
                    # –ë—ã—Å—Ç—Ä–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ frame
                    if frame_name:
                        try:
                            self.driver.switch_to.frame(frame_name)
                        except:
                            if frame_type == 'iframe':
                                iframe_element = self.driver.find_elements(By.TAG_NAME, "iframe")[frame['index']]
                                self.driver.switch_to.frame(iframe_element)
                            else:
                                frame_element = self.driver.find_elements(By.TAG_NAME, "frame")[frame['index']]
                                self.driver.switch_to.frame(frame_element)
                    else:
                        if frame_type == 'iframe':
                            iframe_element = self.driver.find_elements(By_TAG_NAME, "iframe")[frame['index']]
                            self.driver.switch_to.frame(iframe_element)
                        else:
                            frame_element = self.driver.find_elements(By.TAG_NAME, "frame")[frame['index']]
                            self.driver.switch_to.frame(frame_element)
                    
                    result['iframe_switched'] = True
                    
                    # –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                    frame_status = self.driver.execute_script("""
                        var result = {
                            timer_found: false,
                            timer_value: null,
                            button_found: false,
                            button_element: null
                        };
                        
                        // –ü–æ–∏—Å–∫ —Ç–∞–π–º–µ—Ä–∞
                        var timerSelectors = [
                            'span.timer.notranslate#timer_inp', 
                            'span#timer_inp', 
                            'span.timer',
                            'span#tmr',
                            '#tmr',
                            '.tmr'
                        ];
                        
                        for (var s = 0; s < timerSelectors.length; s++) {
                            try {
                                var elements = document.querySelectorAll(timerSelectors[s]);
                                for (var t = 0; t < elements.length; t++) {
                                    var element = elements[t];
                                    var elementText = element.textContent.trim();
                                    
                                    if (element.offsetParent !== null && /^\\d+$/.test(elementText)) {
                                        result.timer_found = true;
                                        result.timer_value = parseInt(elementText);
                                        break;
                                    }
                                }
                                if (result.timer_found) break;
                            } catch (e) {
                                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–∫–∏
                            }
                        }
                        
                        // –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–æ–∫
                        var buttonSelectors = [
                            'a.btn_capt', 
                            'a[href*="vlss?view=ok"]', 
                            'a[href*="view=ok"]',
                            'button[type="submit"]',
                            'input[type="submit"]'
                        ];
                        
                        for (var s = 0; s < buttonSelectors.length; s++) {
                            try {
                                var elements = document.querySelectorAll(buttonSelectors[s]);
                                for (var b = 0; b < elements.length; b++) {
                                    var element = elements[b];
                                    var text = element.textContent.trim().toLowerCase();
                                    var href = element.href || '';
                                    var onclick = element.getAttribute('onclick') || '';
                                    
                                    if (element.offsetParent !== null && 
                                        (text.includes('–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å') || 
                                         text.includes('–ø—Ä–æ—Å–º–æ—Ç—Ä') ||
                                         text.includes('confirm') ||
                                         text.includes('ok') ||
                                         href.includes('vlss?view=ok') ||
                                         href.includes('view=ok') ||
                                         onclick.includes('view=ok') ||
                                         onclick.includes('vlss'))) {
                                        result.button_found = true;
                                        result.button_element = element;
                                        break;
                                    }
                                }
                                if (result.button_found) break;
                            } catch (e) {
                                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–∫–∏
                            }
                        }
                        
                        return result;
                    """)
                    
                    # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ - –∫–ª–∏–∫–∞–µ–º
                    if frame_status.get('button_found', False):
                        try:
                            self.driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", frame_status['button_element'])
                            time.sleep(0.5)
                            self.driver.execute_script("arguments[0].click();", frame_status['button_element'])
                            logging.info("‚úÖ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
                            time.sleep(2)
                            result['button_found'] = True
                            self.driver.switch_to.default_content()
                            return result
                        except Exception as e:
                            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ: {e}")
                    
                    if frame_status.get('timer_found', False):
                        result['timer_found'] = True
                        result['timer_value'] = frame_status.get('timer_value')
                    
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –¥–æ–∫—É–º–µ–Ω—Ç—É
                    self.driver.switch_to.default_content()
                    result['iframe_switched'] = False
                    
                    # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ç–∞–π–º–µ—Ä - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    if result['timer_found']:
                        return result
                    
                except Exception as e:
                    try:
                        self.driver.switch_to.default_content()
                        result['iframe_switched'] = False
                    except:
                        pass
                    continue
            
            return result
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ frame: {e}")
            try:
                if result.get('iframe_switched', False):
                    self.driver.switch_to.default_content()
            except:
                pass
            return result

class LetterTaskHandler:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞–Ω–∏–π –Ω–∞ —á—Ç–µ–Ω–∏–µ –ø–∏—Å–µ–º"""
    
    def __init__(self, driver, base_url, gpt_manager):
        self.driver = driver
        self.base_url = base_url
        self.gpt_manager = gpt_manager
    
    def get_tasks(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –Ω–∞ —á—Ç–µ–Ω–∏–µ –ø–∏—Å–µ–º —Å –ø–æ–¥—Å—á–µ—Ç–æ–º –æ–±—â–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∫–∞"""
        logging.info("üìß –ü–æ–∏—Å–∫ –∑–∞–¥–∞–Ω–∏–π –Ω–∞ —á—Ç–µ–Ω–∏–µ –ø–∏—Å–µ–º...")
        
        try:
            if "/tasks-letter" not in self.driver.current_url:
                self.driver.get(f"{self.base_url}/tasks-letter")
                time.sleep(1)
            
            letter_tasks_data = self.driver.execute_script("""
                var tasks = [];
                var totalEarnings = 0;
                var startDivs = document.querySelectorAll("div[id^='start-mails-']");
                
                for (var i = 0; i < startDivs.length; i++) {
                    try {
                        var startDiv = startDivs[i];
                        var taskIdMatch = startDiv.id.match(/start-mails-(\\d+)/);
                        
                        if (taskIdMatch) {
                            var taskId = taskIdMatch[1];
                            var link = startDiv.querySelector("a");
                            var title = link ? link.textContent.trim() : 'unknown';
                            var url = link ? link.getAttribute('title') : 'unknown';
                            
                            // –ü–∞—Ä—Å–∏–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —á—Ç–µ–Ω–∏—è
                            var row = startDiv.closest('tr');
                            var price = 0;
                            if (row) {
                                var priceElement = row.querySelector('td[style*="text-align:right"] span[title="–°—Ç–æ–∏–º–æ—Å—Ç—å —á—Ç–µ–Ω–∏—è"]');
                                if (priceElement) {
                                    var priceText = priceElement.textContent.trim();
                                    var priceMatch = priceText.match(/([0-9.,]+)/);
                                    if (priceMatch) {
                                        price = parseFloat(priceMatch[1].replace(',', '.'));
                                        totalEarnings += price;
                                    }
                                }
                            }
                            
                            tasks.push({
                                id: taskId,
                                title: title,
                                url: url,
                                price: price,
                                start_div_id: startDiv.id
                            });
                        }
                    } catch (e) {
                        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–æ—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                    }
                }
                
                return {
                    tasks: tasks,
                    totalEarnings: totalEarnings
                };
            """)
            
            tasks = []
            total_earnings = letter_tasks_data.get('totalEarnings', 0)
            
            for task_data in letter_tasks_data.get('tasks', []):
                try:
                    task_info = {
                        'id': task_data['id'],
                        'title': task_data['title'],
                        'url': task_data['url'],
                        'price': task_data['price'],
                        'start_div_id': task_data['start_div_id']
                    }
                    tasks.append(task_info)
                except:
                    continue
            
            logging.info(f"üìß –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –ø–∏—Å—å–º–∞: {len(tasks)}")
            logging.info(f"üí∞ –û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –∑–∞ –ø–∏—Å—å–º–∞: {total_earnings:.4f} —Ä—É–±.")
            return tasks
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π –ø–∏—Å–µ–º: {e}")
            return []
    
    def execute_task(self, task: Dict) -> bool:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —á—Ç–µ–Ω–∏–µ –ø–∏—Å—å–º–∞"""
        task_id = task['id']
        logging.info(f"üìß –ü–∏—Å—å–º–æ –∑–∞–¥–∞–Ω–∏–µ {task_id}: {task['title'][:50]}...")
        
        try:
            if "/tasks-letter" not in self.driver.current_url:
                self.driver.get(f"{self.base_url}/tasks-letter")
                time.sleep(1)
            
            # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —ç–ª–µ–º–µ–Ω—Ç—É –ø–µ—Ä–µ–¥ —Ä–∞–±–æ—Ç–æ–π —Å –Ω–∏–º
            try:
                start_div = self.driver.find_element(By.ID, task['start_div_id'])
                self.driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", start_div)
                time.sleep(1)
                start_link = start_div.find_element(By.TAG_NAME, "a")
            except NoSuchElementException:
                logging.warning(f"‚ö† –≠–ª–µ–º–µ–Ω—Ç—ã –ø–∏—Å—å–º–æ –∑–∞–¥–∞–Ω–∏—è {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return False
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–∏—Å—å–º–æ –∑–∞–¥–∞–Ω–∏—è {task_id}: {e}")
                return False
            
            # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∫–ª–∏–∫–æ–º
            pause = random.uniform(1, 3)
            logging.info(f"‚è≥ –°–ª—É—á–∞–π–Ω–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –∫–ª–∏–∫–æ–º {pause:.1f}—Å")
            time.sleep(pause)
            
            try:
                start_link.click()
            except ElementClickInterceptedException:
                self.driver.execute_script("arguments[0].click();", start_link)
            
            time.sleep(2)
            
            wait = WebDriverWait(self.driver, 15)
            
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –ò—Å–ø–æ–ª—å–∑—É–µ–º JavaScript –∫–ª–∏–∫ –¥–ª—è –ø–µ—Ä–µ–∫—Ä—ã—Ç–æ–π –∫–Ω–æ–ø–∫–∏
            try:
                start_reading_button = wait.until(
                    EC.presence_of_element_located((By.CSS_SELECTOR, "a.start-yes-serf"))
                )
                
                # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –∫–Ω–æ–ø–∫–µ
                self.driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", start_reading_button)
                time.sleep(0.5)
                
                # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —á—Ç–µ–Ω–∏—è
                confirm_pause = random.uniform(0.5, 2)
                logging.info(f"‚è≥ –°–ª—É—á–∞–π–Ω–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —á—Ç–µ–Ω–∏—è: {confirm_pause:.1f}—Å")
                time.sleep(confirm_pause)
                
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∫–ª–∏–∫ —á–µ—Ä–µ–∑ JavaScript
                self.driver.execute_script("arguments[0].click();", start_reading_button)
                logging.info("‚úÖ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —á—Ç–µ–Ω–∏—é' (JavaScript –∫–ª–∏–∫)")
                
            except Exception as e:
                logging.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ '–ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —á—Ç–µ–Ω–∏—é': {e}")
                return False
            
            time.sleep(3)
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–∏—Å—å–º–∞
            letter_data = self.extract_letter_data()
            if not letter_data:
                logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞")
                return False
            
            # –ò–º–∏—Ç–∞—Ü–∏—è —á—Ç–µ–Ω–∏—è
            reading_time = HumanBehaviorSimulator.calculate_reading_time(
                letter_data['text'] + letter_data['question'] + " ".join(letter_data['answers'])
            )
            
            logging.info(f"üìö –ò–º–∏—Ç–∞—Ü–∏—è —á—Ç–µ–Ω–∏—è –ø–∏—Å—å–º–∞ ({reading_time:.1f}—Å)...")
            time.sleep(reading_time)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç GPT
            gpt_answer = self.gpt_manager.ask_gpt(
                letter_data['text'], 
                letter_data['question'], 
                letter_data['answers']
            )
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
            if gpt_answer is None:
                logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç GPT. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ.")
                return False
            
            # –ö–ª–∏–∫ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –æ—Ç–≤–µ—Ç—É
            try:
                answer_index = int(gpt_answer) - 1
                if 0 <= answer_index < len(letter_data['answer_links']):
                    selected_link = letter_data['answer_links'][answer_index]
                    logging.info(f"ü§ñ –í—ã–±–∏—Ä–∞—é –æ—Ç–≤–µ—Ç {gpt_answer}: {letter_data['answers'][answer_index][:30]}...")
                    
                    # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –æ—Ç–≤–µ—Ç—É
                    self.driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", selected_link)
                    time.sleep(0.5)
                    
                    selected_link.click()
                    time.sleep(3)  # –ñ–¥–µ–º –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ/–≤–∫–ª–∞–¥–∫—É
                    original_window = self.driver.current_window_handle
                    windows = self.driver.window_handles
                    if len(windows) > 1:
                        logging.info(f"üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(windows)} –æ–∫–æ–Ω, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è...")
                        for window in windows:
                            if window != original_window:
                                self.driver.switch_to.window(window)
                                logging.info(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –Ω–æ–≤–æ–µ –æ–∫–Ω–æ: {self.driver.current_url}")
                                break
                    
                    # –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –∏ –∫–∞–ø—á–∏
                    if self.handle_timer_and_captcha():
                        logging.info("‚úÖ –ü–∏—Å—å–º–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
                        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ –æ–∫–Ω–æ
                        if self.driver.current_window_handle != original_window:
                            self.driver.switch_to.window(original_window)
                        return True
                    else:
                        logging.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–∏—Å—å–º–∞")
                        return False
                else:
                    logging.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –æ—Ç–≤–µ—Ç–∞: {gpt_answer}")
                    return False
            except ValueError:
                logging.error(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç GPT: {gpt_answer}")
                return False
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ GPT: {e}")
                return False
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∏—Å—å–º–æ –∑–∞–¥–∞–Ω–∏—è {task_id}: {e}")
            return False
    
    def extract_letter_data(self) -> Optional[Dict]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–∏—Å—å–º–∞ (—Ç–µ–∫—Å—Ç, –≤–æ–ø—Ä–æ—Å, –æ—Ç–≤–µ—Ç—ã)"""
        try:
            letter_data = self.driver.execute_script("""
                var container = document.querySelector('.mails-earn-view-container');
                if (!container) return null;
                
                // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞
                var textDiv = container.querySelector('div[style*="padding:10px"]');
                var letterText = textDiv ? textDiv.textContent.trim() : '';
                
                // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–æ–ø—Ä–æ—Å
                var questionDiv = container.querySelector('.tiket b');
                var question = questionDiv ? questionDiv.parentNode.textContent.replace('–í–æ–ø—Ä–æ—Å:', '').trim() : '';
                
                // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç—ã
                var answerContainer = container.querySelector('.mails-otvet-new');
                var answerLinks = answerContainer ? answerContainer.querySelectorAll('a') : [];
                var answers = [];
                
                for (var i = 0; i < answerLinks.length; i++) {
                    answers.push(answerLinks[i].textContent.trim());
                }
                
                return {
                    text: letterText,
                    question: question,
                    answers: answers
                };
            """)
            
            if letter_data and letter_data['text'] and letter_data['question'] and letter_data['answers']:
                # –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Å—ã–ª–æ–∫ –¥–ª—è –∫–ª–∏–∫–∞
                answer_links = self.driver.find_elements(By.CSS_SELECTOR, ".mails-otvet-new a")
                
                result = {
                    'text': letter_data['text'],
                    'question': letter_data['question'],
                    'answers': letter_data['answers'],
                    'answer_links': answer_links
                }
                
                logging.info(f"üìß –ü–∏—Å—å–º–æ: {len(result['text'])} —Å–∏–º–≤–æ–ª–æ–≤, {len(result['answers'])} –æ—Ç–≤–µ—Ç–æ–≤")
                return result
            
            return None
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–∏—Å—å–º–∞: {e}")
            return None
    
    def handle_timer_and_captcha(self) -> bool:
        """–ü–æ–∏—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –∏ –∫–∞–ø—á–∏ —Å —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–º –æ–±—Ö–æ–¥–æ–º —Ñ—Ä–µ–π–º–æ–≤"""
        logging.info(f"üîç –ü–æ–∏—Å–∫ —Ç–∞–π–º–µ—Ä–∞ (#tmr) –∏–ª–∏ –∫–∞–ø—á–∏ (input[name='code'][type='range']) –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {self.driver.current_url}")
        
        try:
            # –ñ–¥—ë–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            WebDriverWait(self.driver, 10).until(
                lambda d: d.execute_script("return document.readyState") == "complete"
            )
            logging.info("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            
            max_wait_time = 90  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (—Å–µ–∫)
            check_interval = 0.3  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Å–µ–∫)
            elapsed_time = 0
            last_timer_text = ""
            
            while elapsed_time < max_wait_time:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç
                try:
                    timer = WebDriverWait(self.driver, 1).until(
                        EC.presence_of_element_located((By.ID, "tmr"))
                    )
                    timer_text = timer.text.strip()
                    timer_value = int(''.join(filter(str.isdigit, timer_text))) if any(c.isdigit() for c in timer_text) else -1
                    if timer_text != last_timer_text:
                        print(f"\r‚è∞ –¢–∞–π–º–µ—Ä –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ: {timer_text} ({timer_value}—Å)", end="", flush=True)
                        last_timer_text = timer_text
                    
                    if timer_value <= 0:
                        print()  # –ü–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ —Ç–∞–π–º–µ—Ä–∞
                        logging.info("‚úÖ –¢–∞–π–º–µ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω, –∏—â–µ–º –∫–∞–ø—á—É...")
                    else:
                        time.sleep(check_interval)
                        elapsed_time += check_interval
                        continue
                except TimeoutException:
                    pass
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–ø—á—É –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ
                try:
                    slider = WebDriverWait(self.driver, 1).until(
                        EC.presence_of_element_located((By.CSS_SELECTOR, "input[name='code'][type='range']"))
                    )
                    max_value = self.driver.execute_script("return arguments[0].getAttribute('max');", slider)
                    max_value = int(max_value) if max_value and max_value.isdigit() else 1000
                    logging.info(f"üîê –ö–∞–ø—á–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ, max={max_value}")
                    
                    # –°–ª—É—á–∞–π–Ω–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã —Å –∫–∞–ø—á–µ–π
                    captcha_pause = random.uniform(1, 3)
                    logging.info(f"‚è≥ –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –∫–∞–ø—á–µ–π: {captcha_pause:.1f}—Å")
                    time.sleep(captcha_pause)
                    
                    # –ö—Ä–∏–≤–æ–π —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –ø–æ–ª–∑—É–Ω–æ–∫
                    steps = random.randint(5, 15)
                    current_value = int(self.driver.execute_script("return arguments[0].value;", slider) or 0)
                    step_values = []
                    remaining = max_value - current_value
                    for _ in range(steps - 1):
                        step = random.randint(1, int(remaining / 2)) if remaining > 0 else 0
                        step_values.append(step)
                        remaining -= step
                    step_values.append(remaining)  # –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ –¥–æ –∫–æ–Ω—Ü–∞
                    
                    for step in step_values:
                        current_value += step
                        self.driver.execute_script("""
                            var slider = arguments[0];
                            slider.value = arguments[1];
                            slider.dispatchEvent(new Event('input', { bubbles: true }));
                            slider.dispatchEvent(new Event('change', { bubbles: true }));
                        """, slider, current_value)
                        time.sleep(random.uniform(0.05, 0.3))
                    
                    logging.info(f"‚úÖ –ü–æ–ª–∑—É–Ω–æ–∫ –∫–∞–ø—á–∏ –ø–µ—Ä–µ–º–µ—â—ë–Ω –Ω–∞ {max_value} –∑–∞ {steps} —à–∞–≥–æ–≤")
                    
                    # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –∫–ª–∏–∫–æ–º –ø–æ –∫–Ω–æ–ø–∫–µ
                    button_pause = random.uniform(0.5, 2)
                    logging.info(f"‚è≥ –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –∫–Ω–æ–ø–∫–æ–π '–û—Ç–ø—Ä–∞–≤–∏—Ç—å': {button_pause:.1f}—Å")
                    time.sleep(button_pause)
                    
                    # –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"
                    button = WebDriverWait(self.driver, 5).until(
                        EC.element_to_be_clickable((By.XPATH, "//button[text()='–û—Ç–ø—Ä–∞–≤–∏—Ç—å' or text()='Submit']"))
                    )
                    self.driver.execute_script("arguments[0].click();", button)
                    logging.info("‚úÖ –ö–Ω–æ–ø–∫–∞ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å' –Ω–∞–∂–∞—Ç–∞")
                    time.sleep(2)
                    return True
                except TimeoutException:
                    pass
                
                # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Ñ—Ä–µ–π–º–∞–º
                frames = self.driver.find_elements(By.TAG_NAME, "frame") + self.driver.find_elements(By.TAG_NAME, "iframe")
                logging.info(f"üîç –ù–∞–π–¥–µ–Ω–æ —Ñ—Ä–µ–π–º–æ–≤: {len(frames)}")
                
                for frame in frames:
                    try:
                        self.driver.switch_to.frame(frame)
                        logging.info(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ —Ñ—Ä–µ–π–º: {frame.get_attribute('src') or '–±–µ–∑ src'}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–µ—Ä –≤–æ —Ñ—Ä–µ–π–º–µ
                        try:
                            timer = WebDriverWait(self.driver, 1).until(
                                EC.presence_of_element_located((By.ID, "tmr"))
                            )
                            timer_text = timer.text.strip()
                            timer_value = int(''.join(filter(str.isdigit, timer_text))) if any(c.isdigit() for c in timer_text) else -1
                            if timer_text != last_timer_text:
                                print(f"\r‚è∞ –¢–∞–π–º–µ—Ä –≤–æ —Ñ—Ä–µ–π–º–µ: {timer_text} ({timer_value}—Å)", end="", flush=True)
                                last_timer_text = timer_text
                            
                            if timer_value <= 0:
                                print()  # –ü–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ —Ç–∞–π–º–µ—Ä–∞
                                logging.info("‚úÖ –¢–∞–π–º–µ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω, –∏—â–µ–º –∫–∞–ø—á—É...")
                            else:
                                self.driver.switch_to.default_content()
                                time.sleep(check_interval)
                                elapsed_time += check_interval
                                continue
                        except TimeoutException:
                            pass
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–ø—á—É –≤–æ —Ñ—Ä–µ–π–º–µ
                        try:
                            slider = WebDriverWait(self.driver, 1).until(
                                EC.presence_of_element_located((By.CSS_SELECTOR, "input[name='code'][type='range']"))
                            )
                            max_value = self.driver.execute_script("return arguments[0].getAttribute('max');", slider)
                            max_value = int(max_value) if max_value and max_value.isdigit() else 1000
                            logging.info(f"üîê –ö–∞–ø—á–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤–æ —Ñ—Ä–µ–π–º–µ, max={max_value}")
                            
                            # –°–ª—É—á–∞–π–Ω–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã —Å –∫–∞–ø—á–µ–π
                            captcha_pause = random.uniform(1, 3)
                            logging.info(f"‚è≥ –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –∫–∞–ø—á–µ–π: {captcha_pause:.1f}—Å")
                            time.sleep(captcha_pause)
                            
                            # –ö—Ä–∏–≤–æ–π —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –ø–æ–ª–∑—É–Ω–æ–∫
                            steps = random.randint(5, 15)
                            current_value = int(self.driver.execute_script("return arguments[0].value;", slider) or 0)
                            step_values = []
                            remaining = max_value - current_value
                            for _ in range(steps - 1):
                                step = random.randint(1, int(remaining / 2)) if remaining > 0 else 0
                                step_values.append(step)
                                remaining -= step
                            step_values.append(remaining)
                            
                            for step in step_values:
                                current_value += step
                                self.driver.execute_script("""
                                    var slider = arguments[0];
                                    slider.value = arguments[1];
                                    slider.dispatchEvent(new Event('input', { bubbles: true }));
                                    slider.dispatchEvent(new Event('change', { bubbles: true }));
                                """, slider, current_value)
                                time.sleep(random.uniform(0.05, 0.3))
                            
                            logging.info(f"‚úÖ –ü–æ–ª–∑—É–Ω–æ–∫ –∫–∞–ø—á–∏ –ø–µ—Ä–µ–º–µ—â—ë–Ω –Ω–∞ {max_value} –∑–∞ {steps} —à–∞–≥–æ–≤")
                            
                            # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –∫–ª–∏–∫–æ–º –ø–æ –∫–Ω–æ–ø–∫–µ
                            button_pause = random.uniform(0.5, 2)
                            logging.info(f"‚è≥ –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –∫–Ω–æ–ø–∫–æ–π '–û—Ç–ø—Ä–∞–≤–∏—Ç—å': {button_pause:.1f}—Å")
                            time.sleep(button_pause)
                            
                            # –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"
                            button = WebDriverWait(self.driver, 5).until(
                                EC.element_to_be_clickable((By.XPATH, "//button[text()='–û—Ç–ø—Ä–∞–≤–∏—Ç—å' or text()='Submit']"))
                            )
                            self.driver.execute_script("arguments[0].click();", button)
                            logging.info("‚úÖ –ö–Ω–æ–ø–∫–∞ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å' –Ω–∞–∂–∞—Ç–∞")
                            self.driver.switch_to.default_content()
                            time.sleep(2)
                            return True
                        except TimeoutException:
                            pass
                            
                        # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ñ—Ä–µ–π–º–æ–≤
                        nested_frames = self.driver.find_elements(By.TAG_NAME, "frame") + self.driver.find_elements(By.TAG_NAME, "iframe")
                        if nested_frames:
                            logging.info(f"üîç –ù–∞–π–¥–µ–Ω–æ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ñ—Ä–µ–π–º–æ–≤: {len(nested_frames)}")
                            for nested_frame in nested_frames:
                                try:
                                    self.driver.switch_to.frame(nested_frame)
                                    logging.info(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –≤–ª–æ–∂–µ–Ω–Ω—ã–π —Ñ—Ä–µ–π–º: {nested_frame.get_attribute('src') or '–±–µ–∑ src'}")
                                    
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–µ—Ä –≤–æ –≤–ª–æ–∂–µ–Ω–Ω–æ–º —Ñ—Ä–µ–π–º–µ
                                    try:
                                        timer = WebDriverWait(self.driver, 1).until(
                                            EC.presence_of_element_located((By.ID, "tmr"))
                                        )
                                        timer_text = timer.text.strip()
                                        timer_value = int(''.join(filter(str.isdigit, timer_text))) if any(c.isdigit() for c in timer_text) else -1
                                        if timer_text != last_timer_text:
                                            print(f"\r‚è∞ –¢–∞–π–º–µ—Ä –≤–æ –≤–ª–æ–∂–µ–Ω–Ω–æ–º —Ñ—Ä–µ–π–º–µ: {timer_text} ({timer_value}—Å)", end="", flush=True)
                                            last_timer_text = timer_text
                                        
                                        if timer_value <= 0:
                                            print()  # –ü–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ —Ç–∞–π–º–µ—Ä–∞
                                            logging.info("‚úÖ –¢–∞–π–º–µ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω, –∏—â–µ–º –∫–∞–ø—á—É...")
                                        else:
                                            self.driver.switch_to.default_content()
                                            time.sleep(check_interval)
                                            elapsed_time += check_interval
                                            continue
                                    except TimeoutException:
                                        pass
                                    
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–ø—á—É –≤–æ –≤–ª–æ–∂–µ–Ω–Ω–æ–º —Ñ—Ä–µ–π–º–µ
                                    try:
                                        slider = WebDriverWait(self.driver, 1).until(
                                            EC.presence_of_element_located((By.CSS_SELECTOR, "input[name='code'][type='range']"))
                                        )
                                        max_value = self.driver.execute_script("return arguments[0].getAttribute('max');", slider)
                                        max_value = int(max_value) if max_value and max_value.isdigit() else 1000
                                        logging.info(f"üîê –ö–∞–ø—á–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤–æ –≤–ª–æ–∂–µ–Ω–Ω–æ–º —Ñ—Ä–µ–π–º–µ, max={max_value}")
                                        
                                        # –°–ª—É—á–∞–π–Ω–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã —Å –∫–∞–ø—á–µ–π
                                        captcha_pause = random.uniform(1, 3)
                                        logging.info(f"‚è≥ –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –∫–∞–ø—á–µ–π: {captcha_pause:.1f}—Å")
                                        time.sleep(captcha_pause)
                                        
                                        # –ö—Ä–∏–≤–æ–π —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –ø–æ–ª–∑—É–Ω–æ–∫
                                        steps = random.randint(5, 15)
                                        current_value = int(self.driver.execute_script("return arguments[0].value;", slider) or 0)
                                        step_values = []
                                        remaining = max_value - current_value
                                        for _ in range(steps - 1):
                                            step = random.randint(1, int(remaining / 2)) if remaining > 0 else 0
                                            step_values.append(step)
                                            remaining -= step
                                        step_values.append(remaining)
                                        
                                        for step in step_values:
                                            current_value += step
                                            self.driver.execute_script("""
                                                var slider = arguments[0];
                                                slider.value = arguments[1];
                                                slider.dispatchEvent(new Event('input', { bubbles: true }));
                                                slider.dispatchEvent(new Event('change', { bubbles: true }));
                                            """, slider, current_value)
                                            time.sleep(random.uniform(0.05, 0.3))
                                        
                                        logging.info(f"‚úÖ –ü–æ–ª–∑—É–Ω–æ–∫ –∫–∞–ø—á–∏ –ø–µ—Ä–µ–º–µ—â—ë–Ω –Ω–∞ {max_value} –∑–∞ {steps} —à–∞–≥–æ–≤")
                                        
                                        # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –∫–ª–∏–∫–æ–º –ø–æ –∫–Ω–æ–ø–∫–µ
                                        button_pause = random.uniform(0.5, 2)
                                        logging.info(f"‚è≥ –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –∫–Ω–æ–ø–∫–æ–π '–û—Ç–ø—Ä–∞–≤–∏—Ç—å': {button_pause:.1f}—Å")
                                        time.sleep(button_pause)
                                        
                                        # –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"
                                        button = WebDriverWait(self.driver, 5).until(
                                            EC.element_to_be_clickable((By.XPATH, "//button[text()='–û—Ç–ø—Ä–∞–≤–∏—Ç—å' or text()='Submit']"))
                                        )
                                        self.driver.execute_script("arguments[0].click();", button)
                                        logging.info("‚úÖ –ö–Ω–æ–ø–∫–∞ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å' –Ω–∞–∂–∞—Ç–∞")
                                        self.driver.switch_to.default_content()
                                        time.sleep(2)
                                        return True
                                    except TimeoutException:
                                        pass
                                    
                                    self.driver.switch_to.default_content()
                                except:
                                    self.driver.switch_to.default_content()
                                    continue
                            
                        self.driver.switch_to.default_content()
                    except:
                        self.driver.switch_to.default_content()
                        continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º Shadow DOM
                shadow_result = self.driver.execute_script("""
                    var result = {
                        timer_found: false,
                        timer_value: -1,
                        timer_text: '',
                        captcha_found: false,
                        slider_moved: false,
                        button_clicked: false,
                        debug: []
                    };
                    
                    function findInShadow(root) {
                        if (!root) return;
                        var shadowRoots = [];
                        var elements = root.querySelectorAll('*');
                        for (var i = 0; i < elements.length; i++) {
                            if (elements[i].shadowRoot) {
                                shadowRoots.push(elements[i].shadowRoot);
                            }
                        }
                        
                        var timer = root.querySelector('#tmr');
                        if (timer) {
                            result.timer_found = true;
                            result.timer_text = timer.textContent.trim();
                            result.timer_value = parseInt(result.timer_text) || -1;
                            result.debug.push(`Shadow DOM: Timer found, value: ${result.timer_value}s`);
                        }
                        
                        if (!result.timer_found) {
                            var sliders = root.querySelectorAll('input[name="code"][type="range"]');
                            if (sliders.length > 0) {
                                var slider = sliders[0];
                                result.captcha_found = true;
                                var maxValue = parseInt(slider.getAttribute('max')) || 1000;
                                
                                var steps = Math.floor(Math.random() * 11) + 5;
                                var current = parseInt(slider.value) || 0;
                                var stepValues = [];
                                var remaining = maxValue - current;
                                for (var i = 0; i < steps - 1; i++) {
                                    var step = Math.floor(Math.random() * (remaining / 2)) + 1;
                                    stepValues.push(step);
                                    remaining -= step;
                                }
                                stepValues.push(remaining);
                                
                                for (var i = 0; i < stepValues.length; i++) {
                                    current += stepValues[i];
                                    slider.value = current;
                                    slider.dispatchEvent(new Event('input', { bubbles: true }));
                                    slider.dispatchEvent(new Event('change', { bubbles: true }));
                                }
                                result.slider_moved = true;
                                result.debug.push(`Shadow DOM: Moved slider to ${maxValue} in ${steps} steps`);
                                
                                var buttons = root.querySelectorAll('button');
                                for (var i = 0; i < buttons.length; i++) {
                                    var button = buttons[i];
                                    var buttonText = button.textContent.trim();
                                    if (buttonText === '–û—Ç–ø—Ä–∞–≤–∏—Ç—å' || buttonText === 'Submit') {
                                        button.click();
                                        result.button_clicked = true;
                                        result.debug.push(`Shadow DOM: Clicked button: ${buttonText}`);
                                        break;
                                    }
                                }
                            }
                        }
                        
                        for (var i = 0; i < shadowRoots.length; i++) {
                            findInShadow(shadowRoots[i]);
                        }
                    }
                    
                    findInShadow(document);
                    return result;
                """)
                
                if shadow_result['timer_found']:
                    if shadow_result['timer_text'] != last_timer_text:
                        print(f"\r‚è∞ –¢–∞–π–º–µ—Ä –≤ Shadow DOM: {shadow_result['timer_text']} ({shadow_result['timer_value']}—Å)", end="", flush=True)
                        last_timer_text = shadow_result['timer_text']
                    if shadow_result['timer_value'] <= 0:
                        print()  # –ü–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ —Ç–∞–π–º–µ—Ä–∞
                        logging.info("‚úÖ –¢–∞–π–º–µ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω, –∏—â–µ–º –∫–∞–ø—á—É...")
                    else:
                        for debug_msg in shadow_result['debug']:
                            logging.info(f"   üîπ {debug_msg}")
                        time.sleep(check_interval)
                        elapsed_time += check_interval
                        continue
                elif shadow_result['captcha_found'] and shadow_result['slider_moved'] and shadow_result['button_clicked']:
                    logging.info("‚úÖ –ö–∞–ø—á–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ Shadow DOM!")
                    for debug_msg in shadow_result['debug']:
                        logging.info(f"   üîπ {debug_msg}")
                    time.sleep(2)
                    return True
                
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                if elapsed_time % 10 == 0:
                    logging.info(f"üîç –ü–æ–∏—Å–∫ —Ç–∞–π–º–µ—Ä–∞/–∫–∞–ø—á–∏... ({elapsed_time}/{max_wait_time}—Å)")
                    # –î–∞–º–ø HTML –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    html = self.driver.execute_script("return document.documentElement.outerHTML;")
                    logging.debug(f"üìÑ –¢–µ–∫—É—â–∏–π HTML: {html[:1000]}...")  # –û–≥—Ä–∞–Ω–∏—á–∏–º –¥–ª–∏–Ω—É –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                
                time.sleep(check_interval)
                elapsed_time += check_interval
            
            print()  # –ü–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏, —á—Ç–æ–±—ã –Ω–µ –æ—Å—Ç–∞–≤–ª—è—Ç—å –∫—É—Ä—Å–æ—Ä –≤ –∫–æ–Ω—Ü–µ
            logging.warning("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–π–º–µ—Ä –∏–ª–∏ –∫–∞–ø—á—É –∑–∞ –æ—Ç–≤–µ–¥—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è")
            # –§–∏–Ω–∞–ª—å–Ω—ã–π –¥–∞–º–ø HTML
            html = self.driver.execute_script("return document.documentElement.outerHTML;")
            logging.error(f"‚ùå –§–∏–Ω–∞–ª—å–Ω—ã–π HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {html[:2000]}...")
            return False
            
        except Exception as e:
            print()  # –ü–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞–π–º–µ—Ä–∞/–∫–∞–ø—á–∏: {e}")
            return False

class LoginHandler:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    
    def __init__(self, driver, base_url, username, password):
        self.driver = driver
        self.base_url = base_url
        self.username = username
        self.password = password
        self.cookies_file = "aviso_cookies.pkl"
    
    def check_authorization(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫ –ø—Ä–æ—Ñ–∏–ª—è"""
        try:
            # –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            time.sleep(1)  # –£—Å–∫–æ—Ä–µ–Ω–æ
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–ª–æ–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
            profile_found = self.driver.execute_script("""
                // –ò—â–µ–º –±–ª–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                var userBlock = document.querySelector('.user-block__info');
                if (userBlock) {
                    // –ò—â–µ–º ID, –Ω–∏–∫ –∏ —Å—Ç–∞—Ç—É—Å
                    var userIdElement = document.querySelector('#user-block-info-userid');
                    var usernameElement = document.querySelector('#user-block-info-username');
                    var statusElement = document.querySelector('.user-block-info__item .info_value a');
                    
                    if (userIdElement && usernameElement) {
                        return {
                            authorized: true,
                            user_id: userIdElement.textContent.trim(),
                            username: usernameElement.textContent.trim(),
                            status: statusElement ? statusElement.textContent.trim() : 'unknown'
                        };
                    }
                }
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ—Ñ–∏–ª—è
                var profileElements = document.querySelectorAll('[class*="user"], [id*="user"], [class*="profile"], [id*="profile"]');
                var hasProfile = false;
                
                for (var i = 0; i < profileElements.length; i++) {
                    var element = profileElements[i];
                    var text = element.textContent.toLowerCase();
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                    if (text.includes('–ø—Ä–æ—Ñ–∏–ª—å') || text.includes('balance') || text.includes('–±–∞–ª–∞–Ω—Å') || 
                        text.includes('–≤—ã–π—Ç–∏') || text.includes('logout') || text.includes('–Ω–∞—Å—Ç—Ä–æ–π–∫–∏')) {
                        hasProfile = true;
                        break;
                    }
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ñ–æ—Ä–º –ª–æ–≥–∏–Ω–∞
                var loginForms = document.querySelectorAll('input[name="username"], input[name="login"], input[name="password"]');
                var hasLoginForm = false;
                
                for (var i = 0; i < loginForms.length; i++) {
                    if (loginForms[i].offsetParent !== null) {
                        hasLoginForm = true;
                        break;
                    }
                }
                
                return {
                    authorized: hasProfile && !hasLoginForm,
                    user_id: null,
                    username: null,
                    status: null,
                    debug: {
                        hasProfile: hasProfile,
                        hasLoginForm: hasLoginForm,
                        url: window.location.href,
                        title: document.title
                    }
                };
            """)
            
            if profile_found.get('authorized', False):
                if profile_found.get('user_id') and profile_found.get('username'):
                    logging.info(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: ID={profile_found['user_id']}, –ù–∏–∫={profile_found['username']}, –°—Ç–∞—Ç—É—Å={profile_found['status']}")
                else:
                    logging.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω (–ø—Ä–æ—Ñ–∏–ª—å –Ω–∞–π–¥–µ–Ω)")
                return True
            else:
                debug_info = profile_found.get('debug', {})
                logging.info(f"‚ùå –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - URL: {debug_info.get('url', 'unknown')}")
                logging.info(f"   –ó–∞–≥–æ–ª–æ–≤–æ–∫: {debug_info.get('title', 'unknown')}")
                logging.info(f"   –ï—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—å: {debug_info.get('hasProfile', False)}")
                logging.info(f"   –ï—Å—Ç—å —Ñ–æ—Ä–º–∞ –ª–æ–≥–∏–Ω–∞: {debug_info.get('hasLoginForm', False)}")
                return False
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def login(self) -> bool:
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"""
        logging.info("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
        
        try:
            self.driver.get(f"{self.base_url}/login")
            time.sleep(2)  # –£—Å–∫–æ—Ä–µ–Ω–æ
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ª–æ–≥–∏–Ω–∞
            current_url = self.driver.current_url
            if "/login" not in current_url:
                logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞. –¢–µ–∫—É—â–∏–π URL: {current_url}")
                return False
            
            # –ò–ó–ú–ï–ù–ï–ù–ò–ï 1: –£–º–µ–Ω—å—à–∞–µ–º —Ç–∞–π–º–∞—É—Ç –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            wait = WebDriverWait(self.driver, 15)
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞
            try:
                logging.info("üîç –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ñ–æ—Ä–º—ã...")
                username_field = wait.until(EC.presence_of_element_located((By.NAME, "username")))
                password_field = self.driver.find_element(By.NAME, "password")
                login_button = self.driver.find_element(By.ID, "button-login")
                logging.info("‚úÖ –≠–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã –Ω–∞–π–¥–µ–Ω—ã")
            except Exception as e:
                logging.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã –ª–æ–≥–∏–Ω–∞: {e}")
                return False
            
            # –í–≤–æ–¥–∏–º –ª–æ–≥–∏–Ω
            logging.info("‚å®Ô∏è –í–≤–æ–¥ –ª–æ–≥–∏–Ω–∞...")
            username_field.click()
            time.sleep(0.2)  # –£—Å–∫–æ—Ä–µ–Ω–æ
            HumanBehaviorSimulator.human_like_typing(username_field, self.username, self.driver)
            
            # –í–≤–æ–¥–∏–º –ø–∞—Ä–æ–ª—å
            logging.info("‚å®Ô∏è –í–≤–æ–¥ –ø–∞—Ä–æ–ª—è...")
            password_field.click()
            time.sleep(0.2)  # –£—Å–∫–æ—Ä–µ–Ω–æ
            HumanBehaviorSimulator.human_like_typing(password_field, self.password, self.driver)
            
            # –°–ª—É—á–∞–π–Ω–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º
            pause_time = random.uniform(0.5, 1.5)  # –£—Å–∫–æ—Ä–µ–Ω–æ
            logging.info(f"‚è≥ –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º: {pause_time:.1f}—Å")
            time.sleep(pause_time)
            
            # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞
            try:
                logging.info("üîò –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞...")
                login_button.click()
                logging.info("‚úÖ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞")
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞: {e}")
                # –ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ JavaScript
                try:
                    self.driver.execute_script("arguments[0].click();", login_button)
                    logging.info("‚úÖ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ JavaScript")
                except Exception as e2:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ JavaScript: {e2}")
                    return False
            
            # –ò–ó–ú–ï–ù–ï–ù–ò–ï 2: –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            logging.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
            time.sleep(10)  # –ë—ã–ª–æ 3, —Å—Ç–∞–ª–æ 10
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
            current_url = self.driver.current_url
            logging.info(f"üîç URL –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞: {current_url}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2FA –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
            if "/2fa" in current_url:
                logging.info("üîê –¢—Ä–µ–±—É–µ—Ç—Å—è 2FA –∫–æ–¥")
                
                try:
                    code_field = wait.until(EC.presence_of_element_located((By.NAME, "code")))
                    
                    verification_code = input("–í–≤–µ–¥–∏—Ç–µ 2FA –∫–æ–¥: ").strip()
                    
                    if verification_code and verification_code.isdigit():
                        code_field.click()
                        HumanBehaviorSimulator.human_like_typing(code_field, verification_code, self.driver)
                        
                        confirm_buttons = self.driver.find_elements(By.CSS_SELECTOR, "button.button_theme_blue")
                        if confirm_buttons:
                            confirm_buttons[0].click()
                        
                        time.sleep(10)  # –ë—ã–ª–æ 3, —Å—Ç–∞–ª–æ 10
                    
                except Exception as e:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ 2FA: {e}")
                    return False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ—Ñ–∏–ª—å
            logging.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
            if self.check_authorization():
                logging.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
                self.save_cookies()
                return True
            else:
                logging.error("‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å - –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
                page_source = self.driver.page_source
                if "–Ω–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω" in page_source.lower() or "–Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å" in page_source.lower():
                    logging.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                elif "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" in page_source.lower():
                    logging.error("‚ùå –ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
                else:
                    logging.error("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                
                return False
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def save_cookies(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ cookies"""
        try:
            cookies = self.driver.get_cookies()
            with open(self.cookies_file, 'wb') as f:
                pickle.dump(cookies, f)
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è cookies: {e}")
    
    def load_cookies(self) -> bool:
        """–ó–∞–≥—Ä—É–∑–∫–∞ cookies"""
        try:
            if os.path.exists(self.cookies_file):
                self.driver.get(self.base_url)
                time.sleep(2)  # –£—Å–∫–æ—Ä–µ–Ω–æ
                
                with open(self.cookies_file, 'rb') as f:
                    cookies = pickle.load(f)
                
                for cookie in cookies:
                    try:
                        self.driver.add_cookie(cookie)
                    except:
                        pass
                
                return True
        except:
            pass
        
        return False

class AvisoAutomation:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ Aviso"""
    
    def __init__(self):
        self.setup_logging()
        self.driver = None
        self.tor_manager = SimpleTorManager()
        self.ua_manager = UserAgentManager()
        self.gecko_manager = GeckoDriverManager()
        self.gpt_manager = GPTManager()
        self.task_coordinator = TaskCoordinator()
        self.original_ip = None
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        self.username = "aleksey836"
        self.password = "123456"
        self.base_url = "https://aviso.bz"
        
        # –†–ï–û–†–ì–ê–ù–ò–ó–ê–¶–ò–Ø: –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–¥–∞—á
        self.youtube_handler = None
        self.surf_handler = None
        self.letter_handler = None
        self.login_handler = None
        
        logging.info("üöÄ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ Aviso Bot")
        
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        log_filename = f"aviso_bot_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log"
        log_format = "%(asctime)s [%(levelname)s] %(message)s"
        
        for handler in logging.root.handlers[:]:
            logging.root.removeHandler(handler)
        
        logging.basicConfig(
            level=logging.INFO,
            format=log_format,
            handlers=[
                logging.StreamHandler(sys.stdout),
                logging.FileHandler(log_filename, encoding='utf-8')
            ]
        )

    def get_current_ip_without_proxy(self) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ IP –±–µ–∑ –ø—Ä–æ–∫—Å–∏"""
        test_services = [
            'https://api.ipify.org?format=text',
            'https://icanhazip.com/',
            'https://checkip.amazonaws.com/'
        ]
        
        for service in test_services:
            try:
                response = requests.get(service, timeout=10)
                response.raise_for_status()
                external_ip = response.text.strip()
                
                import re
                if re.match(r'^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$', external_ip):
                    return external_ip
            except:
                continue
        
        return None

    def verify_ip_change_via_2ip(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–µ–Ω—ã IP —á–µ—Ä–µ–∑ 2ip.ru"""
        try:
            self.driver.get("https://2ip.ru")
            time.sleep(3)  # –£—Å–∫–æ—Ä–µ–Ω–æ
            
            ip_element = self.driver.find_element(By.CSS_SELECTOR, "div.ip span")
            current_ip = ip_element.text.strip()
            logging.info(f"üîç IP: {current_ip}")
            
            if self.original_ip and current_ip == self.original_ip:
                logging.error("‚ùå IP –Ω–µ —Å–º–µ–Ω–∏–ª—Å—è! Tor –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                return False
            else:
                logging.info("‚úÖ IP —Å–º–µ–Ω–∏–ª—Å—è")
                return True
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ IP: {e}")
            return False

    def find_firefox_binary(self) -> Optional[str]:
        """–ü–æ–∏—Å–∫ Firefox"""
        possible_paths = []
        
        if self.tor_manager.is_termux:
            possible_paths = [
                '/data/data/com.termux/files/usr/bin/firefox',
                f"{os.environ.get('PREFIX', '')}/bin/firefox"
            ]
        elif self.tor_manager.system == 'linux':
            possible_paths = [
                '/usr/bin/firefox',
                '/usr/local/bin/firefox',
                '/opt/firefox/firefox',
                '/snap/bin/firefox'
            ]
        elif self.tor_manager.system == 'windows':
            possible_paths = [
                r"C:\Program Files\Mozilla Firefox\firefox.exe",
                r"C:\Program Files (x86)\Mozilla Firefox\firefox.exe"
            ]
        elif self.tor_manager.system == 'darwin':
            possible_paths = [
                '/Applications/Firefox.app/Contents/MacOS/firefox'
            ]
        
        for path in possible_paths:
            if os.path.exists(path) and os.access(path, os.X_OK):
                return path
        
        if self.tor_manager.command_exists('firefox'):
            return 'firefox'
        
        return None

    def setup_driver(self) -> bool:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Firefox —Å –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ú Tor"""
        logging.info("üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º Tor...")
        
        self.original_ip = self.get_current_ip_without_proxy()
        
        # –ü–æ–ø—ã—Ç–∫–∏ –∑–∞–ø—É—Å–∫–∞ Tor - –¢–ê–ô–ú–ê–£–¢–´ –ù–ï –ò–ó–ú–ï–ù–ï–ù–´
        for attempt in range(3):
            logging.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ Tor {attempt + 1}/3")
            if self.tor_manager.start_tor():
                logging.info("‚úÖ Tor –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                break
            else:
                logging.error(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å")
                if attempt == 2:
                    logging.error("üí• –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Tor –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫. –ó–ê–í–ï–†–®–ï–ù–ò–ï –†–ê–ë–û–¢–´.")
                    sys.exit(1)
                time.sleep(10)  # –¢–ê–ô–ú–ê–£–¢ –ù–ï –ò–ó–ú–ï–ù–ï–ù
        
        try:
            user_agent = self.ua_manager.get_user_agent(self.username)
            geckodriver_path = self.gecko_manager.get_driver_path()
            
            firefox_options = Options()
            
            # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê–Ø –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Tor –ø—Ä–æ–∫—Å–∏
            firefox_options.set_preference("network.proxy.type", 1)
            firefox_options.set_preference("network.proxy.socks", "127.0.0.1")
            firefox_options.set_preference("network.proxy.socks_port", self.tor_manager.tor_port)
            firefox_options.set_preference("network.proxy.socks_version", 5)
            firefox_options.set_preference("network.proxy.socks_remote_dns", True)
            firefox_options.set_preference("network.proxy.http", "")
            firefox_options.set_preference("network.proxy.http_port", 0)
            firefox_options.set_preference("network.proxy.ssl", "")
            firefox_options.set_preference("network.proxy.ssl_port", 0)
            
            firefox_options.set_preference("general.useragent.override", user_agent)
            firefox_options.set_preference("dom.webdriver.enabled", False)
            firefox_options.set_preference("useAutomationExtension", False)
            firefox_options.set_preference("network.http.use-cache", False)
            
            if "Android" in user_agent:
                firefox_options.set_preference("layout.css.devPixelRatio", "2.0")
                firefox_options.set_preference("dom.w3c_touch_events.enabled", 1)
            else:
                firefox_options.set_preference("layout.css.devPixelRatio", "2.0")
                firefox_options.set_preference("dom.w3c_touch_events.enabled", 1)
                firefox_options.set_preference("general.appname.override", "Netscape")
                firefox_options.set_preference("general.appversion.override", "5.0 (Mobile; rv:68.0)")
            
            firefox_options.set_preference("media.peerconnection.enabled", False)
            firefox_options.set_preference("media.navigator.enabled", False)
            firefox_options.set_preference("privacy.resistFingerprinting", False)
            firefox_options.set_preference("privacy.trackingprotection.enabled", True)
            firefox_options.set_preference("geo.enabled", False)
            firefox_options.set_preference("browser.safebrowsing.downloads.remote.enabled", False)
            firefox_options.set_preference("app.update.enabled", False)
            firefox_options.set_preference("toolkit.telemetry.enabled", False)
            firefox_options.set_preference("datareporting.healthreport.uploadEnabled", False)
            
            if self.tor_manager.is_termux:
                firefox_options.add_argument("--no-sandbox")
                firefox_options.add_argument("--disable-dev-shm-usage")
            
            firefox_binary = self.find_firefox_binary()
            if firefox_binary and firefox_binary != 'firefox':
                firefox_options.binary_location = firefox_binary
            
            service = Service(executable_path=geckodriver_path)
            self.driver = webdriver.Firefox(options=firefox_options, service=service)
            
            self.driver.set_page_load_timeout(60)  # –¢–ê–ô–ú–ê–£–¢ –ù–ï –ò–ó–ú–ï–ù–ï–ù
            self.driver.implicitly_wait(10)  # –¢–ê–ô–ú–ê–£–¢ –ù–ï –ò–ó–ú–ï–ù–ï–ù
            
            if "Android" in user_agent:
                mobile_sizes = [(360, 640), (375, 667), (414, 896), (393, 851)]
                width, height = random.choice(mobile_sizes)
            else:
                ipad_sizes = [(768, 1024), (834, 1112), (1024, 1366)]
                width, height = random.choice(ipad_sizes)
            
            self.driver.set_window_size(width, height)
            logging.info("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω —Å Tor")
            
            # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–µ–Ω—ã IP
            if not self.verify_ip_change_via_2ip():
                logging.error("‚ùå IP –Ω–µ —Å–º–µ–Ω–∏–ª—Å—è! Tor –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ó–ê–í–ï–†–®–ï–ù–ò–ï.")
                sys.exit(1)
            
            # –†–ï–û–†–ì–ê–ù–ò–ó–ê–¶–ò–Ø: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–¥–∞—á
            self.youtube_handler = YouTubeTaskHandler(self.driver, self.base_url)
            self.surf_handler = SurfTaskHandler(self.driver, self.base_url)
            self.letter_handler = LetterTaskHandler(self.driver, self.base_url, self.gpt_manager)
            self.login_handler = LoginHandler(self.driver, self.base_url, self.username, self.password)
            
            return True
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            return False
    
    def execute_tasks_by_type(self, task_type: str) -> int:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º –≤—ã–±–æ—Ä–æ–º –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–æ–π"""
        logging.info(f"üéØ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π —Ç–∏–ø–∞: {task_type}")
    
        completed_tasks = 0
        max_attempts = 50
        attempt_count = 0
        
        try:
            while attempt_count < max_attempts:
                attempt_count += 1
            
                # –ü–û–í–¢–û–†–ù–´–ô –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–¥–∞–Ω–∏–π –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                if task_type == 'youtube':
                    tasks = self.youtube_handler.get_tasks()
                elif task_type == 'surf':
                    tasks = self.surf_handler.get_tasks()
                elif task_type == 'letters':
                    tasks = self.letter_handler.get_tasks()
                else:
                    break
            
                if not tasks:
                    if task_type == 'surf' and self.surf_handler.error_tasks:
                        logging.info(f"‚Ñπ –í—Å–µ —Å—ë—Ä—Ñ–∏–Ω–≥ –∑–∞–¥–∞–Ω–∏—è –∏–º–µ—é—Ç –æ—à–∏–±–∫—É (.start-error-serf), –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–∏–ø")
                        break
                    logging.info(f"‚Ñπ –ó–∞–¥–∞–Ω–∏–π —Ç–∏–ø–∞ {task_type} –±–æ–ª—å—à–µ –Ω–µ—Ç")
                    break
            
                # –°–õ–£–ß–ê–ô–ù–´–ô –≤—ã–±–æ—Ä –∑–∞–¥–∞–Ω–∏—è
                task = random.choice(tasks)
                task_id = task['id']
            
                logging.info(f"üìù {task_type.title()} {completed_tasks + 1} (ID: {task_id}) –∏–∑ {len(tasks)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö")
            
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞–Ω–∏–µ
                success = False
                if task_type == 'youtube':
                    success = self.youtube_handler.execute_task(task)
                elif task_type == 'surf':
                    success = self.surf_handler.execute_task(task)
                elif task_type == 'letters':
                    success = self.letter_handler.execute_task(task)
            
                if success:
                    completed_tasks += 1
                    logging.info(f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ {task_id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed_tasks}")
                    self.inter_task_pause()
                else:
                    logging.warning(f"‚ö† –ó–∞–¥–∞–Ω–∏–µ {task_id} –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É")
                    time.sleep(random.uniform(0.5, 1.5))
        
            logging.info(f"üèÅ {task_type}: –∑–∞–≤–µ—Ä—à–µ–Ω–æ {completed_tasks} –∑–∞–¥–∞–Ω–∏–π")
            return completed_tasks
        
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π {task_type}: {e}")
            return completed_tasks
    
    def inter_task_pause(self):
        """–ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–¥–∞–Ω–∏—è–º–∏ —Å –∏–º–∏—Ç–∞—Ü–∏–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ - –£–°–ö–û–†–ï–ù–û"""
        pause_time = random.uniform(0.2, 4)  # –£—Å–∫–æ—Ä–µ–Ω–æ
        logging.info(f"‚è≥ –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–¥–∞–Ω–∏—è–º–∏ {pause_time:.1f}—Å")
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –ø–∞—É–∑—É –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
        intervals = max(1, int(pause_time // 2))  # –£—Å–∫–æ—Ä–µ–Ω–æ
        interval_duration = pause_time / intervals
        
        for _ in range(intervals):
            if random.random() < 0.2:  # –†–µ–∂–µ
                self.random_mouse_movement()
            if random.random() < 0.1:  # –†–µ–∂–µ
                self.random_scroll()
            time.sleep(interval_duration)
    
    def execute_all_task_types(self) -> Dict[str, int]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞–Ω–∏–π –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ"""
        logging.info("üîÑ –ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ –∑–∞–¥–∞–Ω–∏–π")
        
        results = {}
        self.task_coordinator.reset_cycle()
        
        while not self.task_coordinator.is_cycle_complete():
            task_type = self.task_coordinator.get_next_task_type()
            if task_type:
                completed = self.execute_tasks_by_type(task_type)
                results[task_type] = completed
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–∏–ø–∞–º–∏ –∑–∞–¥–∞–Ω–∏–π - –£–°–ö–û–†–ï–ù–û
                if not self.task_coordinator.is_cycle_complete():
                    type_pause = random.uniform(5, 30)  # –£—Å–∫–æ—Ä–µ–Ω–æ
                    logging.info(f"üò¥ –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–∏–ø–∞–º–∏ –∑–∞–¥–∞–Ω–∏–π: {type_pause:.1f}—Å")
                    time.sleep(type_pause)
        
        total_completed = sum(results.values())
        logging.info(f"üèÜ –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω! –í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {total_completed} –∑–∞–¥–∞–Ω–∏–π")
        logging.info(f"üìä –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è: {results}")
        
        return results
    
    def random_mouse_movement(self):
        """–£–°–ö–û–†–ï–ù–ù–û–ï –¥–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏"""
        try:
            viewport_size = self.driver.get_window_size()
            max_width = max(100, viewport_size['width'] - 100)
            max_height = max(100, viewport_size['height'] - 100)
            
            # –ú–µ–Ω—å—à–µ –¥–≤–∏–∂–µ–Ω–∏–π
            movement_count = random.randint(1, 2)  # –£—Å–∫–æ—Ä–µ–Ω–æ
            
            for _ in range(movement_count):
                current_pos = (random.randint(50, max_width), random.randint(50, max_height))
                new_pos = (random.randint(50, max_width), random.randint(50, max_height))
                
                curve_points = HumanBehaviorSimulator.generate_bezier_curve(current_pos, new_pos)
                actions = ActionChains(self.driver)
                
                for i, point in enumerate(curve_points):
                    if i == 0:
                        continue
                    prev_point = curve_points[i-1]
                    offset_x = max(-50, min(50, int(point[0] - prev_point[0])))
                    offset_y = max(-50, min(50, int(point[1] - prev_point[1])))
                    actions.move_by_offset(offset_x, offset_y)
                    time.sleep(random.uniform(0.001, 0.01))  # –ë—ã—Å—Ç—Ä–µ–µ
                
                actions.perform()
                time.sleep(random.uniform(0.05, 0.15))  # –ë—ã—Å—Ç—Ä–µ–µ
        except:
            pass
    
    def random_scroll(self):
        """–£–°–ö–û–†–ï–ù–ù–ê–Ø —Å–ª—É—á–∞–π–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞"""
        try:
            # –°–ª—É—á–∞–π–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
            scroll_direction = random.choice(['up', 'down', 'left', 'right'])
            
            # –°–ª—É—á–∞–π–Ω–∞—è —Å–∏–ª–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
            scroll_amount = random.randint(25, 150)  # –£—Å–∫–æ—Ä–µ–Ω–æ
            
            # –ú–µ–Ω—å—à–µ —à–∞–≥–æ–≤ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
            scroll_steps = random.randint(1, 3)  # –£—Å–∫–æ—Ä–µ–Ω–æ
            step_amount = scroll_amount // scroll_steps
            
            for _ in range(scroll_steps):
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å –≤ –∫–∞–∂–¥—ã–π —à–∞–≥
                step_variation = random.randint(-10, 10)
                current_step = step_amount + step_variation
                
                if scroll_direction == 'down':
                    self.driver.execute_script(f"window.scrollBy(0, {current_step});")
                elif scroll_direction == 'up':
                    self.driver.execute_script(f"window.scrollBy(0, -{current_step});")
                elif scroll_direction == 'right':
                    self.driver.execute_script(f"window.scrollBy({current_step}, 0);")
                elif scroll_direction == 'left':
                    self.driver.execute_script(f"window.scrollBy(-{current_step}, 0);")
                
                time.sleep(random.uniform(0.02, 0.1))  # –ë—ã—Å—Ç—Ä–µ–µ
            
            # –†–µ–∂–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º
            if random.random() < 0.1:  # –†–µ–∂–µ
                try:
                    # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ —Å–ª—É—á–∞–π–Ω–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
                    elements = self.driver.find_elements(By.TAG_NAME, "div")
                    if elements:
                        random_element = random.choice(elements[:5])  # –ú–µ–Ω—å—à–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                        self.driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", random_element)
                        time.sleep(random.uniform(0.1, 0.4))  # –ë—ã—Å—Ç—Ä–µ–µ
                except:
                    pass
            
        except:
            pass

    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            if self.driver:
                self.driver.quit()
        except:
            pass
        
        try:
            self.tor_manager.stop_tor()
        except:
            pass
    
    def run_cycle(self) -> bool:
        """–û–¥–∏–Ω –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã"""
        logging.info("üîÑ –ù–∞—á–∞–ª–æ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞")
        
        try:
            if not self.setup_driver():
                logging.error("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞")
                return False
            
            cookies_loaded = self.login_handler.load_cookies()
            
            if cookies_loaded:
                logging.info("üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ cookies...")
                self.driver.refresh()
                time.sleep(1)  # –£—Å–∫–æ—Ä–µ–Ω–æ
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ—Ñ–∏–ª—å
                if self.login_handler.check_authorization():
                    logging.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω —á–µ—Ä–µ–∑ cookies")
                else:
                    logging.info("‚ùå Cookies –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã, –ø—Ä–æ—Ö–æ–¥–∏–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é")
                    if not self.login_handler.login():
                        return False
            else:
                if not self.login_handler.login():
                    return False
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞–Ω–∏–π
            results = self.execute_all_task_types()
            total_completed = sum(results.values())
            
            if total_completed > 0:
                logging.info(f"‚úÖ –¶–∏–∫–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω: {total_completed} –∑–∞–¥–∞–Ω–∏–π")
            else:
                logging.info("‚Ñπ –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω, –∑–∞–¥–∞–Ω–∏–π –Ω–µ –±—ã–ª–æ")
            
            return True
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞: {e}")
            return False
        finally:
            self.cleanup()
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª"""
        logging.info("ü§ñ –ó–ê–ü–£–°–ö –£–õ–£–ß–®–ï–ù–ù–û–ì–û AVISO BOT")
        logging.info("üÜï –£–õ–£–ß–®–ï–ù–ò–Ø:")
        logging.info("   ‚úÖ –†–µ–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∫–æ–¥–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã")
        logging.info("   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω—Ç–∏–±–æ—Ç –∑–∞—â–∏—Ç—ã YouTube")
        logging.info("   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ 'frame_status' is not defined")
        logging.info("   ‚úÖ –£–±—Ä–∞–Ω–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ø–∏—Å–µ–º")
        logging.info("   ‚úÖ –í 2 —Ä–∞–∑–∞ —É–º–µ–Ω—å—à–µ–Ω–æ –≤—Ä–µ–º—è —á—Ç–µ–Ω–∏—è")
        logging.info("   ‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏ —É—Å–∫–æ—Ä–µ–Ω–∏–µ")
        logging.info("   ‚úÖ –£–º–µ–Ω—å—à–µ–Ω—ã —Å–ª—É—á–∞–π–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏")
        logging.info("   ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤—Å–µ —Ç–∞–π–º–∞—É—Ç—ã –±–µ–∑ –ø—Ä–µ–∂–¥–µ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π")
        
        cycle_count = 0
        consecutive_failures = 0
        max_consecutive_failures = 3
        
        try:
            while True:
                cycle_count += 1
                logging.info(f"üîÑ –¶–ò–ö–õ #{cycle_count}")
                
                success = self.run_cycle()
                
                if success:
                    consecutive_failures = 0
                    
                    # –°–ª—É—á–∞–π–Ω–∞—è –ø–∞—É–∑–∞ –æ—Ç 1 –º–∏–Ω—É—Ç—ã –¥–æ 2 —á–∞—Å–æ–≤ - –ù–ï –ò–ó–ú–ï–ù–ï–ù–û
                    pause_minutes = random.uniform(1, 120)
                    pause_seconds = pause_minutes * 60
                    
                    next_run_time = datetime.now() + timedelta(seconds=pause_seconds)
                    
                    logging.info(f"üò¥ –ü–∞—É–∑–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞: {pause_minutes:.1f} –º–∏–Ω—É—Ç")
                    logging.info(f"‚è∞ –°–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª: {next_run_time.strftime('%H:%M:%S')}")
                    
                    # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—É—é –ø–∞—É–∑—É –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã - –ù–ï –ò–ó–ú–ï–ù–ï–ù–û
                    pause_intervals = max(1, int(pause_seconds // 300))
                    interval_duration = pause_seconds / pause_intervals
                    
                    for i in range(pause_intervals):
                        remaining_time = (pause_intervals - i) * interval_duration / 60
                        if i % 6 == 0:
                            logging.info(f"üò¥ –û–∂–∏–¥–∞–Ω–∏–µ... –û—Å—Ç–∞–ª–æ—Å—å: {remaining_time:.1f} –º–∏–Ω—É—Ç")
                        time.sleep(interval_duration)
                else:
                    consecutive_failures += 1
                    
                    if consecutive_failures >= max_consecutive_failures:
                        logging.error("üí• –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥ - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞")
                        break
                    else:
                        pause_minutes = random.uniform(5, 15)
                    
                    logging.warning(f"‚ö† –û—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞, –ø–∞—É–∑–∞ {pause_minutes:.1f} –º–∏–Ω—É—Ç")
                    time.sleep(pause_minutes * 60)
        
        except KeyboardInterrupt:
            logging.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ Ctrl+C")
        except Exception as e:
            logging.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            self.cleanup()
            logging.info("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")

def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É"""
    print("ü§ñ Aviso Automation Bot - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø")
    print("=" * 80)
    print("üÜï –£–õ–£–ß–®–ï–ù–ò–Ø –í –≠–¢–û–ô –í–ï–†–°–ò–ò:")
    print("   ‚úÖ –†–µ–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∫–æ–¥–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–¥–∞–Ω–∏–π")
    print("   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω—Ç–∏–±–æ—Ç –∑–∞—â–∏—Ç—ã YouTube - –∑–∞—Å—á–∏—Ç—ã–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π")
    print("   ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—à–∏–±–∫–∞ 'frame_status' is not defined")
    print("   ‚úÖ –£–ë–†–ê–ù–ê –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –∏–º–∏—Ç–∞—Ü–∏–∏ —á—Ç–µ–Ω–∏—è –ø–∏—Å–µ–º")
    print("   ‚úÖ –í 2 –†–ê–ó–ê —É–º–µ–Ω—å—à–µ–Ω–æ –≤—Ä–µ–º—è —á—Ç–µ–Ω–∏—è –ø–∏—Å–µ–º")
    print("   ‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏ —É—Å–∫–æ—Ä–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")
    print("   ‚úÖ –£–º–µ–Ω—å—à–µ–Ω—ã —Å–ª—É—á–∞–π–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –∏ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏")
    print("   ‚úÖ –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤—Å–µ —Ç–∞–π–º–∞—É—Ç—ã –±–µ–∑ –ø—Ä–µ–∂–¥–µ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π")
    print("üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫...")
    print("‚ö†  –í–ù–ò–ú–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ—Ç–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ!")
    print("üîí –ë–û–¢ –†–ê–ë–û–¢–ê–ï–¢ –¢–û–õ–¨–ö–û –ß–ï–†–ï–ó TOR!")
    print("üìã –§—É–Ω–∫—Ü–∏–∏:")
    print("   - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ aviso.bz")
    print("   - –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π YouTube —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∞–Ω—Ç–∏–±–æ—Ç –∑–∞—â–∏—Ç—ã")
    print("   - –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –Ω–∞ —Å–µ—Ä—Ñ–∏–Ω–≥ —Å–∞–π—Ç–æ–≤")
    print("   - –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –Ω–∞ —á—Ç–µ–Ω–∏–µ –ø–∏—Å–µ–º —Å –ò–ò")
    print("   - –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä —Ç–∏–ø–æ–≤ –∑–∞–¥–∞–Ω–∏–π")
    print("   - –ò–º–∏—Ç–∞—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è")
    print("   - –†–∞–±–æ—Ç–∞ –¢–û–õ–¨–ö–û —á–µ—Ä–µ–∑ Tor –ø—Ä–æ–∫—Å–∏")
    print("   - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–µ–Ω—ã IP —á–µ—Ä–µ–∑ 2ip.ru")
    print("   - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ geckodriver")
    print("   - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ g4f –¥–ª—è GPT-4")
    print("   - –°–ª—É—á–∞–π–Ω—ã–π User-Agent –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞")
    print("   - –£–ª—É—á—à–µ–Ω–Ω–∞—è –∏–º–∏—Ç–∞—Ü–∏—è –æ–ø–µ—á–∞—Ç–æ–∫ –ø—Ä–∏ –≤–≤–æ–¥–µ")
    print("   - –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —á—Ç–µ–Ω–∏—è –¥–ª—è pis–µ–º")
    print("   - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Termux/Android")
    print("=" * 80)
    print()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    bot = AvisoAutomation()
    
    try:
        bot.run()
    except Exception as e:
        logging.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print("üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
        sys.exit(1)
    finally:
        print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")

if __name__ == "__main__":
    main()
